webpackJsonp([1],{2:function(e,n,t){e.exports=t("M1TT")},KF6U:function(e,n){e.exports=function(e){"undefined"!=typeof execScript?execScript(e):eval.call(null,e)}},M1TT:function(e,n,t){t("KF6U")(t("jzf4"))},jzf4:function(e,n){e.exports="(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.deepstream = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nif (typeof module !== 'undefined') {\n  module.exports = Emitter;\n}\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || Object.create(null);\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || Object.create(null);\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = Object.create(null);\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks[event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || Object.create(null);\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks[event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || Object.create(null);\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n/**\n * Returns an array listing the events for which the emitter has registered listeners.\n *\n * @return {Array}\n * @api public\n */\nEmitter.prototype.eventNames = function(){\n  return this._callbacks ? Object.keys(this._callbacks) : [];\n}\n\n},{}],2:[function(_dereq_,module,exports){\n\n},{}],3:[function(_dereq_,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(_dereq_,module,exports){\n(function (global){\n/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],5:[function(_dereq_,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n},{}],6:[function(_dereq_,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n},{}],7:[function(_dereq_,module,exports){\n'use strict';\n\nexports.decode = exports.parse = _dereq_('./decode');\nexports.encode = exports.stringify = _dereq_('./encode');\n\n},{\"./decode\":5,\"./encode\":6}],8:[function(_dereq_,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = _dereq_('punycode');\nvar util = _dereq_('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = _dereq_('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n},{\"./util\":9,\"punycode\":4,\"querystring\":7}],9:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n},{}],10:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('./constants/constants');\nvar MS = _dereq_('./constants/merge-strategies');\nvar Emitter = _dereq_('component-emitter2');\nvar Connection = _dereq_('./message/connection');\nvar EventHandler = _dereq_('./event/event-handler');\nvar RpcHandler = _dereq_('./rpc/rpc-handler');\nvar RecordHandler = _dereq_('./record/record-handler');\nvar PresenceHandler = _dereq_('./presence/presence-handler');\nvar defaultOptions = _dereq_('./default-options');\nvar AckTimeoutRegistry = _dereq_('./utils/ack-timeout-registry');\n\n/**\n * deepstream.io javascript client\n *\n * @copyright 2016 deepstreamHub GmbH\n * @author deepstreamHub GmbH\n *\n *\n * @{@link http://deepstream.io}\n *\n *\n * @param {String} url     URL to connect to. The protocol can be ommited, e.g. <host>:<port>.\n * @param {Object} options A map of options that extend the ones specified in default-options.js\n *\n * @public\n * @constructor\n */\nvar Client = function Client(url, options) {\n  this._url = url;\n  this._options = this._getOptions(options || {});\n\n  this._connection = new Connection(this, this._url, this._options);\n  this._ackTimeoutRegistry = new AckTimeoutRegistry(this, this._options);\n\n  this.event = new EventHandler(this._options, this._connection, this);\n  this.rpc = new RpcHandler(this._options, this._connection, this);\n  this.record = new RecordHandler(this._options, this._connection, this);\n  this.presence = new PresenceHandler(this._options, this._connection, this);\n\n  this._messageCallbacks = {};\n  this._messageCallbacks[C.TOPIC.EVENT] = this.event._$handle.bind(this.event);\n  this._messageCallbacks[C.TOPIC.RPC] = this.rpc._$handle.bind(this.rpc);\n  this._messageCallbacks[C.TOPIC.RECORD] = this.record._$handle.bind(this.record);\n  this._messageCallbacks[C.TOPIC.PRESENCE] = this.presence._$handle.bind(this.presence);\n  this._messageCallbacks[C.TOPIC.ERROR] = this._onErrorMessage.bind(this);\n};\n\nEmitter(Client.prototype); // eslint-disable-line\n\n/**\n * Send authentication parameters to the client to fully open\n * the connection.\n *\n * Please note: Authentication parameters are send over an already established\n * connection, rather than appended to the server URL. This means the parameters\n * will be encrypted when used with a WSS / HTTPS connection. If the deepstream server\n * on the other side has message logging enabled it will however be written to the logs in\n * plain text. If additional security is a requirement it might therefor make sense to hash\n * the password on the client.\n *\n * If the connection is not yet established the authentication parameter will be\n * stored and send once it becomes available\n *\n * authParams can be any JSON serializable data structure and its up for the\n * permission handler on the server to make sense of them, although something\n * like { username: 'someName', password: 'somePass' } will probably make the most sense.\n *\n * login can be called multiple times until either the connection is authenticated or\n * forcefully closed by the server since its maxAuthAttempts threshold has been exceeded\n *\n * @param   {Object}   authParams JSON.serializable authentication data\n * @param   {Function} callback   Will be called with either (true) or (false, data)\n *\n * @public\n * @returns {Client}\n */\nClient.prototype.login = function (authParamsOrCallback, callback) {\n  if (typeof authParamsOrCallback === 'function') {\n    this._connection.authenticate({}, authParamsOrCallback);\n  } else {\n    this._connection.authenticate(authParamsOrCallback || {}, callback);\n  }\n  return this;\n};\n\n/**\n * Closes the connection to the server.\n *\n * @public\n * @returns {void}\n */\nClient.prototype.close = function () {\n  this._connection.close();\n};\n\n/**\n * Returns the current state of the connection.\n *\n * connectionState is one of CONSTANTS.CONNECTION_STATE\n *\n * @returns {[type]} [description]\n */\nClient.prototype.getConnectionState = function () {\n  return this._connection.getState();\n};\n\n/**\n * Returns a random string. The first block of characters\n * is a timestamp, in order to allow databases to optimize for semi-\n * sequentuel numberings\n *\n * @public\n * @returns {String} unique id\n */\nClient.prototype.getUid = function () {\n  var timestamp = new Date().getTime().toString(36);\n  var randomString = (Math.random() * 10000000000000000).toString(36).replace('.', '');\n\n  return timestamp + '-' + randomString;\n};\n\n/**\n * Package private ack timeout registry. This is how all classes can get access to\n * register timeouts.\n * (Well... that's the intention anyways)\n *\n * @package private\n * @returns {AckTimeoutRegistry}\n */\nClient.prototype._$getAckTimeoutRegistry = function () {\n  return this._ackTimeoutRegistry;\n};\n\n/**\n * Package private callback for parsed incoming messages. Will be invoked\n * by the connection class\n *\n * @param   {Object} message parsed deepstream message\n *\n * @package private\n * @returns {void}\n */\nClient.prototype._$onMessage = function (message) {\n  if (this._messageCallbacks[message.topic]) {\n    this._messageCallbacks[message.topic](message);\n  } else {\n    message.processedError = true;\n    this._$onError(message.topic, C.EVENT.MESSAGE_PARSE_ERROR, 'Received message for unknown topic ' + message.topic);\n  }\n\n  if (message.action === C.ACTIONS.ERROR && !message.processedError) {\n    this._$onError(message.topic, message.data[0], message.data.slice(0));\n  }\n};\n\n/**\n * Package private error callback. This is the single point at which\n * errors are thrown in the client. (Well... that's the intention anyways)\n *\n * The expectations would be for implementations to subscribe\n * to the client's error event to prevent errors from being thrown\n * and then decide based on the event and topic parameters how\n * to handle the errors\n *\n * IMPORTANT: Errors that are specific to a request, e.g. a RPC\n * timing out or a record not being permissioned are passed directly\n * to the method that requested them\n *\n * @param   {String} topic One of CONSTANTS.TOPIC\n * @param   {String} event One of CONSTANTS.EVENT\n * @param   {String} msg   Error dependent message\n *\n * @package private\n * @returns {void}\n */\nClient.prototype._$onError = function (topic, event, msg) {\n  var errorMsg = void 0;\n\n  /*\n   * Help to diagnose the problem quicker by checking for\n   * some common problems\n   */\n  if (event === C.EVENT.ACK_TIMEOUT || event === C.EVENT.RESPONSE_TIMEOUT) {\n    if (this.getConnectionState() === C.CONNECTION_STATE.AWAITING_AUTHENTICATION) {\n      errorMsg = 'Your message timed out because you\\'re not authenticated. Have you called login()?';\n      setTimeout(this._$onError.bind(this, C.EVENT.NOT_AUTHENTICATED, C.TOPIC.ERROR, errorMsg), 1);\n    }\n  }\n\n  if (this.hasListeners('error')) {\n    this.emit('error', msg, event, topic);\n    this.emit(event, topic, msg);\n  } else {\n    console.log('--- You can catch all deepstream errors by subscribing to the error event ---');\n\n    errorMsg = event + ': ' + msg;\n\n    if (topic) {\n      errorMsg += ' (' + topic + ')';\n    }\n\n    throw new Error(errorMsg);\n  }\n};\n\n/**\n * Passes generic messages from the error topic\n * to the _$onError handler\n *\n * @param {Object} errorMessage parsed deepstream error message\n *\n * @private\n * @returns {void}\n */\nClient.prototype._onErrorMessage = function (errorMessage) {\n  this._$onError(errorMessage.topic, errorMessage.data[0], errorMessage.data[1]);\n};\n\n/**\n * Creates a new options map by extending default\n * options with the passed in options\n *\n * @param   {Object} options The user specified client configuration options\n *\n * @private\n * @returns {Object}  merged options\n */\nClient.prototype._getOptions = function (options) {\n  var mergedOptions = {};\n\n  for (var key in defaultOptions) {\n    if (typeof options[key] === 'undefined') {\n      mergedOptions[key] = defaultOptions[key];\n    } else {\n      mergedOptions[key] = options[key];\n    }\n  }\n\n  return mergedOptions;\n};\n\n/**\n * Exports factory function to adjust to the current JS style of\n * disliking 'new' :-)\n *\n * @param {String} url     URL to connect to. The protocol can be ommited, e.g. <host>:<port>.\n * @param {Object} options A map of options that extend the ones specified in default-options.js\n *\n * @public\n * @returns {void}\n */\nfunction createDeepstream(url, options) {\n  return new Client(url, options);\n}\n\n/**\n * Expose constants to allow consumers to access them\n*/\nClient.prototype.CONSTANTS = C;\ncreateDeepstream.CONSTANTS = C;\n\n/**\n * Expose merge strategies to allow consumers to access them\n*/\nClient.prototype.MERGE_STRATEGIES = MS;\ncreateDeepstream.MERGE_STRATEGIES = MS;\n\nmodule.exports = createDeepstream;\n\n},{\"./constants/constants\":11,\"./constants/merge-strategies\":12,\"./default-options\":13,\"./event/event-handler\":14,\"./message/connection\":15,\"./presence/presence-handler\":18,\"./record/record-handler\":22,\"./rpc/rpc-handler\":24,\"./utils/ack-timeout-registry\":27,\"component-emitter2\":1}],11:[function(_dereq_,module,exports){\n'use strict';\n\nexports.CONNECTION_STATE = {};\n\nexports.CONNECTION_STATE.CLOSED = 'CLOSED';\nexports.CONNECTION_STATE.AWAITING_CONNECTION = 'AWAITING_CONNECTION';\nexports.CONNECTION_STATE.CHALLENGING = 'CHALLENGING';\nexports.CONNECTION_STATE.AWAITING_AUTHENTICATION = 'AWAITING_AUTHENTICATION';\nexports.CONNECTION_STATE.AUTHENTICATING = 'AUTHENTICATING';\nexports.CONNECTION_STATE.OPEN = 'OPEN';\nexports.CONNECTION_STATE.ERROR = 'ERROR';\nexports.CONNECTION_STATE.RECONNECTING = 'RECONNECTING';\n\nexports.MESSAGE_SEPERATOR = String.fromCharCode(30); // ASCII Record Seperator 1E\nexports.MESSAGE_PART_SEPERATOR = String.fromCharCode(31); // ASCII Unit Separator 1F\n\nexports.TYPES = {};\nexports.TYPES.STRING = 'S';\nexports.TYPES.OBJECT = 'O';\nexports.TYPES.NUMBER = 'N';\nexports.TYPES.NULL = 'L';\nexports.TYPES.TRUE = 'T';\nexports.TYPES.FALSE = 'F';\nexports.TYPES.UNDEFINED = 'U';\n\nexports.TOPIC = {};\nexports.TOPIC.CONNECTION = 'C';\nexports.TOPIC.AUTH = 'A';\nexports.TOPIC.ERROR = 'X';\nexports.TOPIC.EVENT = 'E';\nexports.TOPIC.RECORD = 'R';\nexports.TOPIC.RPC = 'P';\nexports.TOPIC.PRESENCE = 'U';\nexports.TOPIC.PRIVATE = 'PRIVATE/';\n\nexports.EVENT = {};\nexports.EVENT.CONNECTION_ERROR = 'connectionError';\nexports.EVENT.CONNECTION_STATE_CHANGED = 'connectionStateChanged';\nexports.EVENT.MAX_RECONNECTION_ATTEMPTS_REACHED = 'MAX_RECONNECTION_ATTEMPTS_REACHED';\nexports.EVENT.CONNECTION_AUTHENTICATION_TIMEOUT = 'CONNECTION_AUTHENTICATION_TIMEOUT';\nexports.EVENT.ACK_TIMEOUT = 'ACK_TIMEOUT';\nexports.EVENT.NO_RPC_PROVIDER = 'NO_RPC_PROVIDER';\nexports.EVENT.RESPONSE_TIMEOUT = 'RESPONSE_TIMEOUT';\nexports.EVENT.DELETE_TIMEOUT = 'DELETE_TIMEOUT';\nexports.EVENT.UNSOLICITED_MESSAGE = 'UNSOLICITED_MESSAGE';\nexports.EVENT.MESSAGE_DENIED = 'MESSAGE_DENIED';\nexports.EVENT.MESSAGE_PARSE_ERROR = 'MESSAGE_PARSE_ERROR';\nexports.EVENT.VERSION_EXISTS = 'VERSION_EXISTS';\nexports.EVENT.NOT_AUTHENTICATED = 'NOT_AUTHENTICATED';\nexports.EVENT.MESSAGE_PERMISSION_ERROR = 'MESSAGE_PERMISSION_ERROR';\nexports.EVENT.LISTENER_EXISTS = 'LISTENER_EXISTS';\nexports.EVENT.NOT_LISTENING = 'NOT_LISTENING';\nexports.EVENT.TOO_MANY_AUTH_ATTEMPTS = 'TOO_MANY_AUTH_ATTEMPTS';\nexports.EVENT.INVALID_AUTH_MSG = 'INVALID_AUTH_MSG';\nexports.EVENT.IS_CLOSED = 'IS_CLOSED';\nexports.EVENT.RECORD_NOT_FOUND = 'RECORD_NOT_FOUND';\nexports.EVENT.NOT_SUBSCRIBED = 'NOT_SUBSCRIBED';\n\nexports.ACTIONS = {};\nexports.ACTIONS.PING = 'PI';\nexports.ACTIONS.PONG = 'PO';\nexports.ACTIONS.ACK = 'A';\nexports.ACTIONS.REDIRECT = 'RED';\nexports.ACTIONS.CHALLENGE = 'CH';\nexports.ACTIONS.CHALLENGE_RESPONSE = 'CHR';\nexports.ACTIONS.READ = 'R';\nexports.ACTIONS.CREATE = 'C';\nexports.ACTIONS.UPDATE = 'U';\nexports.ACTIONS.PATCH = 'P';\nexports.ACTIONS.DELETE = 'D';\nexports.ACTIONS.SUBSCRIBE = 'S';\nexports.ACTIONS.UNSUBSCRIBE = 'US';\nexports.ACTIONS.HAS = 'H';\nexports.ACTIONS.SNAPSHOT = 'SN';\nexports.ACTIONS.INVOKE = 'I';\nexports.ACTIONS.SUBSCRIPTION_FOR_PATTERN_FOUND = 'SP';\nexports.ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED = 'SR';\nexports.ACTIONS.SUBSCRIPTION_HAS_PROVIDER = 'SH';\nexports.ACTIONS.LISTEN = 'L';\nexports.ACTIONS.UNLISTEN = 'UL';\nexports.ACTIONS.LISTEN_ACCEPT = 'LA';\nexports.ACTIONS.LISTEN_REJECT = 'LR';\nexports.ACTIONS.PROVIDER_UPDATE = 'PU';\nexports.ACTIONS.QUERY = 'Q';\nexports.ACTIONS.CREATEORREAD = 'CR';\nexports.ACTIONS.CREATEANDUPDATE = 'CU';\nexports.ACTIONS.EVENT = 'EVT';\nexports.ACTIONS.ERROR = 'E';\nexports.ACTIONS.REQUEST = 'REQ';\nexports.ACTIONS.RESPONSE = 'RES';\nexports.ACTIONS.REJECTION = 'REJ';\nexports.ACTIONS.PRESENCE_JOIN = 'PNJ';\nexports.ACTIONS.PRESENCE_LEAVE = 'PNL';\nexports.ACTIONS.QUERY = 'Q';\nexports.ACTIONS.WRITE_ACKNOWLEDGEMENT = 'WA';\n\nexports.CALL_STATE = {};\nexports.CALL_STATE.INITIAL = 'INITIAL';\nexports.CALL_STATE.CONNECTING = 'CONNECTING';\nexports.CALL_STATE.ESTABLISHED = 'ESTABLISHED';\nexports.CALL_STATE.ACCEPTED = 'ACCEPTED';\nexports.CALL_STATE.DECLINED = 'DECLINED';\nexports.CALL_STATE.ENDED = 'ENDED';\nexports.CALL_STATE.ERROR = 'ERROR';\n\n},{}],12:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  /**\n  *  Choose the server's state over the client's\n  **/\n  REMOTE_WINS: function REMOTE_WINS(record, remoteValue, remoteVersion, callback) {\n    callback(null, remoteValue);\n  },\n\n  /**\n  *  Choose the local state over the server's\n  **/\n  LOCAL_WINS: function LOCAL_WINS(record, remoteValue, remoteVersion, callback) {\n    callback(null, record.get());\n  }\n};\n\n},{}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar MERGE_STRATEGIES = _dereq_('./constants/merge-strategies');\n\nmodule.exports = {\n  /**\n   * @param {Number} heartBeatInterval           How often you expect the heartbeat to be sent.\n   *                                             If two heatbeats are missed in a row the client\n   *                                             will consider the server to have disconnected\n   *                                             and will close the connection in order to\n   *                                             establish a new one.\n   */\n  heartbeatInterval: 30000,\n\n  /**\n   * @param {Number} reconnectIntervalIncrement  Specifies the number of milliseconds by\n   *                                             which the time until the next reconnection\n   *                                             attempt will be incremented after every\n   *                                             unsuccesful attempt.\n   *                                             E.g. for 1500: if the connection is lost,\n   *                                             the client will attempt to reconnect immediatly,\n   *                                             if that fails it will try again after 1.5 seconds,\n   *                                             if that fails it will try again after 3 seconds\n   *                                             and so on\n   */\n  reconnectIntervalIncrement: 4000,\n\n  /**\n   * @param {Number} maxReconnectInterval        Specifies the maximum number of milliseconds for\n   *                                             the reconnectIntervalIncrement\n   *                                             The amount of reconnections will reach this value\n   *                                             then reconnectIntervalIncrement will be ignored.\n   */\n  maxReconnectInterval: 180000,\n\n  /**\n   * @param {Number} maxReconnectAttempts        The number of reconnection attempts until the\n   *                                             client gives up and declares the connection closed\n   */\n  maxReconnectAttempts: 5,\n\n  /**\n   * @param {Number} rpcAckTimeout               The number of milliseconds after which a rpc will\n   *                                             create an error if no Ack-message has been received\n   */\n  rpcAckTimeout: 6000,\n\n  /**\n   * @param {Number} rpcResponseTimeout          The number of milliseconds after which a rpc will\n   *                                             create an error if no response-message has been\n   *                                             received\n   */\n  rpcResponseTimeout: 10000,\n\n  /**\n   * @param {Number} subscriptionTimeout         The number of milliseconds that can pass after\n   *                                             providing/unproviding a RPC or subscribing/\n   *                                             unsubscribing/listening to a record before an\n   *                                             error is thrown\n   */\n  subscriptionTimeout: 2000,\n\n  /**\n   * @param {Number} maxMessagesPerPacket        If the implementation tries to send a large\n   *                                             number of messages at the same time, the deepstream\n   *                                             client will try to split them into smaller packets\n   *                                             and send these every\n   *                                             <timeBetweenSendingQueuedPackages> ms.\n   *\n   *                                             This parameter specifies the number of messages\n   *                                             after which deepstream sends the packet and\n   *                                             queues the remaining messages.\n   *                                             Set to Infinity to turn the feature off.\n   *\n   */\n  maxMessagesPerPacket: 100,\n\n  /**\n   * @param {Number} timeBetweenSendingQueuedPackages\n   *                                             Please see description for\n   *                                             maxMessagesPerPacket. Sets the time in ms.\n   */\n  timeBetweenSendingQueuedPackages: 16,\n\n  /**\n   * @param {Number} recordReadAckTimeout       The number of milliseconds from the moment\n   *                                            client.record.getRecord() is called until an error\n   *                                            is thrown since no ack message has been received.\n   */\n  recordReadAckTimeout: 15000,\n\n  /**\n   * @param {Number} recordReadTimeout           The number of milliseconds from the moment\n   *                                             client.record.getRecord() is called until an error\n   *                                             is thrown since no data has been received.\n   */\n  recordReadTimeout: 15000,\n\n  /**\n   * @param {Number} recordDeleteTimeout         The number of milliseconds from the moment\n   *                                             record.delete() is called until an error is\n   *                                             thrown since no delete ack message had been\n   *                                             received.\n   *                                             Please take into account that the deletion is only\n   *                                             complete after the record has been deleted from\n   *                                             both cache and storage\n   */\n  recordDeleteTimeout: 15000,\n\n  /**\n   * @param {String} path path to connect to\n   */\n  path: '/deepstream',\n\n  /**\n   *  @param {Function} mergeStrategy            This provides the default strategy used to\n   *                                             deal with merge conflicts.\n   *                                             If the merge strategy is not succesfull it will\n   *                                             set an error, else set the returned data as the\n   *                                             latest revision. This can be overriden on a per\n   *                                             record basis by setting the `setMergeStrategy`.\n   */\n  mergeStrategy: MERGE_STRATEGIES.REMOTE_WINS,\n\n  /**\n   * @param {Boolean} recordDeepCopy             Setting to false disabled deepcopying of record\n   *                                             data when provided via `get()` in a `subscribe`\n   *                                             callback. This improves speed at the expense of\n   *                                             the user having to ensure object immutability.\n   */\n  recordDeepCopy: true,\n\n  /**\n   * https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n   *\n   * @param {Object} nodeSocketOptions           Options to pass to the websocket constructor in\n   *                                             node.\n   * @default null\n   */\n  nodeSocketOptions: null\n};\n\n},{\"./constants/merge-strategies\":12}],14:[function(_dereq_,module,exports){\n'use strict';\n\nvar messageBuilder = _dereq_('../message/message-builder');\nvar messageParser = _dereq_('../message/message-parser');\nvar ResubscribeNotifier = _dereq_('../utils/resubscribe-notifier');\nvar C = _dereq_('../constants/constants');\nvar Listener = _dereq_('../utils/listener');\nvar EventEmitter = _dereq_('component-emitter2');\n\n/**\n * This class handles incoming and outgoing messages in relation\n * to deepstream events. It basically acts like an event-hub that's\n * replicated across all connected clients.\n *\n * @param {Object} options    deepstream options\n * @param {Connection} connection\n * @param {Client} client\n * @public\n * @constructor\n */\nvar EventHandler = function EventHandler(options, connection, client) {\n  this._options = options;\n  this._connection = connection;\n  this._client = client;\n  this._emitter = new EventEmitter();\n  this._listener = {};\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._resubscribeNotifier = new ResubscribeNotifier(this._client, this._resubscribe.bind(this));\n};\n\n/**\n * Subscribe to an event. This will receive both locally emitted events\n * as well as events emitted by other connected clients.\n *\n * @param   {String}   name\n * @param   {Function} callback\n *\n * @public\n * @returns {void}\n */\nEventHandler.prototype.subscribe = function (name, callback) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  if (!this._emitter.hasListeners(name)) {\n    this._ackTimeoutRegistry.add({\n      topic: C.TOPIC.EVENT,\n      action: C.ACTIONS.SUBSCRIBE,\n      name: name\n    });\n    this._connection.sendMsg(C.TOPIC.EVENT, C.ACTIONS.SUBSCRIBE, [name]);\n  }\n\n  this._emitter.on(name, callback);\n};\n\n/**\n * Removes a callback for a specified event. If all callbacks\n * for an event have been removed, the server will be notified\n * that the client is unsubscribed as a listener\n *\n * @param   {String}   name\n * @param   {Function} callback\n *\n * @public\n * @returns {void}\n */\nEventHandler.prototype.unsubscribe = function (name, callback) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n  if (callback !== undefined && typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n  this._emitter.off(name, callback);\n\n  if (!this._emitter.hasListeners(name)) {\n    this._ackTimeoutRegistry.add({\n      topic: C.TOPIC.EVENT,\n      action: C.ACTIONS.UNSUBSCRIBE,\n      name: name\n    });\n    this._connection.sendMsg(C.TOPIC.EVENT, C.ACTIONS.UNSUBSCRIBE, [name]);\n  }\n};\n\n/**\n * Emits an event locally and sends a message to the server to\n * broadcast the event to the other connected clients\n *\n * @param   {String} name\n * @param   {Mixed} data will be serialized and deserialized to its original type.\n *\n * @public\n * @returns {void}\n */\nEventHandler.prototype.emit = function (name, data) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n\n  this._connection.sendMsg(C.TOPIC.EVENT, C.ACTIONS.EVENT, [name, messageBuilder.typed(data)]);\n  this._emitter.emit(name, data);\n};\n\n/**\n * Allows to listen for event subscriptions made by this or other clients. This\n * is useful to create \"active\" data providers, e.g. providers that only provide\n * data for a particular event if a user is actually interested in it\n *\n * @param   {String}   pattern  A combination of alpha numeric characters and wildcards( * )\n * @param   {Function} callback\n *\n * @public\n * @returns {void}\n */\nEventHandler.prototype.listen = function (pattern, callback) {\n  if (typeof pattern !== 'string' || pattern.length === 0) {\n    throw new Error('invalid argument pattern');\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  if (this._listener[pattern] && !this._listener[pattern].destroyPending) {\n    this._client._$onError(C.TOPIC.EVENT, C.EVENT.LISTENER_EXISTS, pattern);\n    return;\n  } else if (this._listener[pattern]) {\n    this._listener[pattern].destroy();\n  }\n\n  this._listener[pattern] = new Listener(C.TOPIC.EVENT, pattern, callback, this._options, this._client, this._connection);\n};\n\n/**\n * Removes a listener that was previously registered with listenForSubscriptions\n *\n * @param   {String}   pattern  A combination of alpha numeric characters and wildcards( * )\n * @param   {Function} callback\n *\n * @public\n * @returns {void}\n */\nEventHandler.prototype.unlisten = function (pattern) {\n  if (typeof pattern !== 'string' || pattern.length === 0) {\n    throw new Error('invalid argument pattern');\n  }\n\n  var listener = this._listener[pattern];\n\n  if (listener && !listener.destroyPending) {\n    listener.sendDestroy();\n  } else if (this._listener[pattern]) {\n    this._ackTimeoutRegistry.add({\n      topic: C.TOPIC.EVENT,\n      action: C.EVENT.UNLISTEN,\n      name: pattern\n    });\n    this._listener[pattern].destroy();\n    delete this._listener[pattern];\n  } else {\n    this._client._$onError(C.TOPIC.RECORD, C.EVENT.NOT_LISTENING, pattern);\n  }\n};\n\n/**\n * Handles incoming messages from the server\n *\n * @param   {Object} message parsed deepstream message\n *\n * @package private\n * @returns {void}\n */\nEventHandler.prototype._$handle = function (message) {\n  var name = message.data[message.action === C.ACTIONS.ACK ? 1 : 0];\n\n  if (message.action === C.ACTIONS.EVENT) {\n    if (message.data && message.data.length === 2) {\n      this._emitter.emit(name, messageParser.convertTyped(message.data[1], this._client));\n    } else {\n      this._emitter.emit(name);\n    }\n    return;\n  }\n\n  if (message.action === C.ACTIONS.ACK && message.data[0] === C.ACTIONS.UNLISTEN && this._listener[name] && this._listener[name].destroyPending) {\n    this._listener[name].destroy();\n    delete this._listener[name];\n    return;\n  } else if (this._listener[name]) {\n    this._listener[name]._$onMessage(message);\n    return;\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED) {\n    // An unlisten ACK was received before an PATTERN_REMOVED which is a valid case\n    return;\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_HAS_PROVIDER) {\n    // record can receive a HAS_PROVIDER after discarding the record\n    return;\n  }\n\n  if (message.action === C.ACTIONS.ACK) {\n    this._ackTimeoutRegistry.clear(message);\n    return;\n  }\n\n  if (message.action === C.ACTIONS.ERROR) {\n    if (message.data[0] === C.EVENT.MESSAGE_DENIED) {\n      this._ackTimeoutRegistry.remove({\n        topic: C.TOPIC.EVENT,\n        name: message.data[1],\n        action: message.data[2]\n      });\n    } else if (message.data[0] === C.EVENT.NOT_SUBSCRIBED) {\n      this._ackTimeoutRegistry.remove({\n        topic: C.TOPIC.EVENT,\n        name: message.data[1],\n        action: C.ACTIONS.UNSUBSCRIBE\n      });\n    }\n    message.processedError = true;\n    this._client._$onError(C.TOPIC.EVENT, message.data[0], message.data[1]);\n    return;\n  }\n\n  this._client._$onError(C.TOPIC.EVENT, C.EVENT.UNSOLICITED_MESSAGE, name);\n};\n\n/**\n * Resubscribes to events when connection is lost\n *\n * @package private\n * @returns {void}\n */\nEventHandler.prototype._resubscribe = function () {\n  var callbacks = this._emitter._callbacks;\n  for (var eventName in callbacks) {\n    this._connection.sendMsg(C.TOPIC.EVENT, C.ACTIONS.SUBSCRIBE, [eventName]);\n  }\n};\n\nmodule.exports = EventHandler;\n\n},{\"../constants/constants\":11,\"../message/message-builder\":16,\"../message/message-parser\":17,\"../utils/listener\":28,\"../utils/resubscribe-notifier\":29,\"component-emitter2\":1}],15:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\nvar NodeWebSocket = _dereq_('ws');\nvar messageParser = _dereq_('./message-parser');\nvar messageBuilder = _dereq_('./message-builder');\nvar utils = _dereq_('../utils/utils');\nvar C = _dereq_('../constants/constants');\n\n/**\n * Establishes a connection to a deepstream server using websockets\n *\n * @param {Client} client\n * @param {String} url     Short url, e.g. <host>:<port>. Deepstream works out the protocol\n * @param {Object} options connection options\n *\n * @constructor\n */\nvar Connection = function Connection(client, url, options) {\n  this._client = client;\n  this._options = options;\n  this._authParams = null;\n  this._authCallback = null;\n  this._deliberateClose = false;\n  this._redirecting = false;\n  this._tooManyAuthAttempts = false;\n  this._connectionAuthenticationTimeout = false;\n  this._challengeDenied = false;\n  this._queuedMessages = [];\n  this._reconnectTimeout = null;\n  this._reconnectionAttempt = 0;\n  this._currentPacketMessageCount = 0;\n  this._sendNextPacketTimeout = null;\n  this._currentMessageResetTimeout = null;\n  this._endpoint = null;\n  this._lastHeartBeat = null;\n  this._heartbeatInterval = null;\n\n  this._originalUrl = utils.parseUrl(url, this._options.path);\n  this._url = this._originalUrl;\n\n  this._state = C.CONNECTION_STATE.CLOSED;\n  this._createEndpoint();\n};\n\n/**\n * Returns the current connection state.\n * (One of constants.CONNECTION_STATE)\n *\n * @public\n * @returns {String} connectionState\n */\nConnection.prototype.getState = function () {\n  return this._state;\n};\n\n/**\n * Sends the specified authentication parameters\n * to the server. Can be called up to <maxAuthAttempts>\n * times for the same connection.\n *\n * @param   {Object}   authParams A map of user defined auth parameters.\n *                                E.g. { username:<String>, password:<String> }\n * @param   {Function} callback   A callback that will be invoked with the authenticationr result\n *\n * @public\n * @returns {void}\n */\nConnection.prototype.authenticate = function (authParams, callback) {\n  if ((typeof authParams === 'undefined' ? 'undefined' : _typeof(authParams)) !== 'object') {\n    this._client._$onError(C.TOPIC.ERROR, C.EVENT.INVALID_AUTH_MSG, 'authParams is not an object');\n    return;\n  }\n\n  this._authParams = authParams;\n  this._authCallback = callback;\n\n  if (this._tooManyAuthAttempts || this._challengeDenied || this._connectionAuthenticationTimeout) {\n    this._client._$onError(C.TOPIC.ERROR, C.EVENT.IS_CLOSED, 'this client\\'s connection was closed');\n    return;\n  } else if (this._deliberateClose === true && this._state === C.CONNECTION_STATE.CLOSED) {\n    this._createEndpoint();\n    this._deliberateClose = false;\n    return;\n  }\n\n  if (this._state === C.CONNECTION_STATE.AWAITING_AUTHENTICATION) {\n    this._sendAuthParams();\n  }\n};\n\n/**\n * High level send message method. Creates a deepstream message\n * string and invokes the actual send method.\n *\n * @param   {String} topic  One of C.TOPIC\n * @param   {String} action One of C.ACTIONS\n * @param   {[Mixed]} data   Date that will be added to the message. Primitive values will\n *                          be appended directly, objects and arrays will be serialized as JSON\n *\n * @private\n * @returns {void}\n */\nConnection.prototype.sendMsg = function (topic, action, data) {\n  this.send(messageBuilder.getMsg(topic, action, data));\n};\n\n/**\n * Main method for sending messages. Doesn't send messages instantly,\n * but instead achieves conflation by adding them to the message\n * buffer that will be drained on the next tick\n *\n * @param   {String} message deepstream message\n *\n * @public\n * @returns {void}\n */\nConnection.prototype.send = function (message) {\n  this._queuedMessages.push(message);\n  this._currentPacketMessageCount++;\n\n  if (this._currentMessageResetTimeout === null) {\n    this._currentMessageResetTimeout = utils.nextTick(this._resetCurrentMessageCount.bind(this));\n  }\n\n  if (this._state === C.CONNECTION_STATE.OPEN && this._queuedMessages.length < this._options.maxMessagesPerPacket && this._currentPacketMessageCount < this._options.maxMessagesPerPacket) {\n    this._sendQueuedMessages();\n  } else if (this._sendNextPacketTimeout === null) {\n    this._queueNextPacket();\n  }\n};\n\n/**\n * Closes the connection. Using this method\n * sets a _deliberateClose flag that will prevent the client from\n * reconnecting.\n *\n * @public\n * @returns {void}\n */\nConnection.prototype.close = function () {\n  clearInterval(this._heartbeatInterval);\n  this._deliberateClose = true;\n  this._endpoint.close();\n};\n\n/**\n * Creates the endpoint to connect to using the url deepstream\n * was initialised with.\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._createEndpoint = function () {\n  this._endpoint = BrowserWebSocket ? new BrowserWebSocket(this._url) : new NodeWebSocket(this._url, this._options.nodeSocketOptions);\n\n  this._endpoint.onopen = this._onOpen.bind(this);\n  this._endpoint.onerror = this._onError.bind(this);\n  this._endpoint.onclose = this._onClose.bind(this);\n  this._endpoint.onmessage = this._onMessage.bind(this);\n};\n\n/**\n * When the implementation tries to send a large\n * number of messages in one execution thread, the first\n * <maxMessagesPerPacket> are send straight away.\n *\n * _currentPacketMessageCount keeps track of how many messages\n * went into that first packet. Once this number has been exceeded\n * the remaining messages are written to a queue and this message\n * is invoked on a timeout to reset the count.\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._resetCurrentMessageCount = function () {\n  this._currentPacketMessageCount = 0;\n  this._currentMessageResetTimeout = null;\n};\n\n/**\n * Concatenates the messages in the current message queue\n * and sends them as a single package. This will also\n * empty the message queue and conclude the send process.\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._sendQueuedMessages = function () {\n  if (this._state !== C.CONNECTION_STATE.OPEN || this._endpoint.readyState !== this._endpoint.OPEN) {\n    return;\n  }\n\n  if (this._queuedMessages.length === 0) {\n    this._sendNextPacketTimeout = null;\n    return;\n  }\n\n  var message = this._queuedMessages.splice(0, this._options.maxMessagesPerPacket).join('');\n\n  if (this._queuedMessages.length !== 0) {\n    this._queueNextPacket();\n  } else {\n    this._sendNextPacketTimeout = null;\n  }\n\n  this._submit(message);\n};\n\n/**\n * Sends a message to over the endpoint connection directly\n *\n * Will generate a connection error if the websocket was closed\n * prior to an onclose event.\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._submit = function (message) {\n  if (this._endpoint.readyState === this._endpoint.OPEN) {\n    this._endpoint.send(message);\n  } else {\n    this._onError('Tried to send message on a closed websocket connection');\n  }\n};\n\n/**\n * Schedules the next packet whilst the connection is under\n * heavy load.\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._queueNextPacket = function () {\n  var fn = this._sendQueuedMessages.bind(this);\n  var delay = this._options.timeBetweenSendingQueuedPackages;\n\n  this._sendNextPacketTimeout = setTimeout(fn, delay);\n};\n\n/**\n * Sends authentication params to the server. Please note, this\n * doesn't use the queued message mechanism, but rather sends the message directly\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._sendAuthParams = function () {\n  this._setState(C.CONNECTION_STATE.AUTHENTICATING);\n  var authMessage = messageBuilder.getMsg(C.TOPIC.AUTH, C.ACTIONS.REQUEST, [this._authParams]);\n  this._submit(authMessage);\n};\n\n/**\n * Ensures that a heartbeat was not missed more than once, otherwise it considers the connection\n * to have been lost and closes it for reconnection.\n * @return {void}\n */\nConnection.prototype._checkHeartBeat = function () {\n  var heartBeatTolerance = this._options.heartbeatInterval * 2;\n\n  if (Date.now() - this._lastHeartBeat > heartBeatTolerance) {\n    clearInterval(this._heartbeatInterval);\n    this._endpoint.close();\n    this._client._$onError(C.TOPIC.CONNECTION, C.EVENT.CONNECTION_ERROR, 'heartbeat not received in the last ' + heartBeatTolerance + ' milliseconds');\n  }\n};\n\n/**\n * Will be invoked once the connection is established. The client\n * can't send messages yet, and needs to get a connection ACK or REDIRECT\n * from the server before authenticating\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._onOpen = function () {\n  this._clearReconnect();\n  this._lastHeartBeat = Date.now();\n  this._heartbeatInterval = utils.setInterval(this._checkHeartBeat.bind(this), this._options.heartbeatInterval);\n  this._setState(C.CONNECTION_STATE.AWAITING_CONNECTION);\n};\n\n/**\n * Callback for generic connection errors. Forwards\n * the error to the client.\n *\n * The connection is considered broken once this method has been\n * invoked.\n *\n * @param   {String|Error} error connection error\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._onError = function (error) {\n  var _this = this;\n\n  clearInterval(this._heartbeatInterval);\n  this._setState(C.CONNECTION_STATE.ERROR);\n\n  /*\n   * If the implementation isn't listening on the error event this will throw\n   * an error. So let's defer it to allow the reconnection to kick in.\n   */\n  setTimeout(function () {\n    var msg = void 0;\n    if (error.code === 'ECONNRESET' || error.code === 'ECONNREFUSED') {\n      msg = 'Can\\'t connect! Deepstream server unreachable on ' + _this._originalUrl;\n    } else {\n      msg = error.toString();\n    }\n    _this._client._$onError(C.TOPIC.CONNECTION, C.EVENT.CONNECTION_ERROR, msg);\n  }, 1);\n};\n\n/**\n * Callback when the connection closes. This might have been a deliberate\n * close triggered by the client or the result of the connection getting\n * lost.\n *\n * In the latter case the client will try to reconnect using the configured\n * strategy.\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._onClose = function () {\n  clearInterval(this._heartbeatInterval);\n\n  if (this._redirecting === true) {\n    this._redirecting = false;\n    this._createEndpoint();\n  } else if (this._deliberateClose === true) {\n    this._setState(C.CONNECTION_STATE.CLOSED);\n  } else {\n    this._tryReconnect();\n  }\n};\n\n/**\n * Callback for messages received on the connection.\n *\n * @param   {String} message deepstream message\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._onMessage = function (message) {\n  var parsedMessages = messageParser.parse(message.data, this._client);\n\n  for (var i = 0; i < parsedMessages.length; i++) {\n    if (parsedMessages[i] === null) {\n      continue;\n    } else if (parsedMessages[i].topic === C.TOPIC.CONNECTION) {\n      this._handleConnectionResponse(parsedMessages[i]);\n    } else if (parsedMessages[i].topic === C.TOPIC.AUTH) {\n      this._handleAuthResponse(parsedMessages[i]);\n    } else {\n      this._client._$onMessage(parsedMessages[i]);\n    }\n  }\n};\n\n/**\n * The connection response will indicate whether the deepstream connection\n * can be used or if it should be forwarded to another instance. This\n * allows us to introduce load-balancing if needed.\n *\n * If authentication parameters are already provided this will kick of\n * authentication immediately. The actual 'open' event won't be emitted\n * by the client until the authentication is successful.\n *\n * If a challenge is recieved, the user will send the url to the server\n * in response to get the appropriate redirect. If the URL is invalid the\n * server will respond with a REJECTION resulting in the client connection\n * being permanently closed.\n *\n * If a redirect is recieved, this connection is closed and updated with\n * a connection to the url supplied in the message.\n *\n * @param   {Object} message parsed connection message\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._handleConnectionResponse = function (message) {\n  if (message.action === C.ACTIONS.PING) {\n    this._lastHeartBeat = Date.now();\n    this._submit(messageBuilder.getMsg(C.TOPIC.CONNECTION, C.ACTIONS.PONG));\n  } else if (message.action === C.ACTIONS.ACK) {\n    this._setState(C.CONNECTION_STATE.AWAITING_AUTHENTICATION);\n    if (this._authParams) {\n      this._sendAuthParams();\n    }\n  } else if (message.action === C.ACTIONS.CHALLENGE) {\n    this._setState(C.CONNECTION_STATE.CHALLENGING);\n    this._submit(messageBuilder.getMsg(C.TOPIC.CONNECTION, C.ACTIONS.CHALLENGE_RESPONSE, [this._originalUrl]));\n  } else if (message.action === C.ACTIONS.REJECTION) {\n    this._challengeDenied = true;\n    this.close();\n  } else if (message.action === C.ACTIONS.REDIRECT) {\n    this._url = message.data[0];\n    this._redirecting = true;\n    this._endpoint.close();\n  } else if (message.action === C.ACTIONS.ERROR) {\n    if (message.data[0] === C.EVENT.CONNECTION_AUTHENTICATION_TIMEOUT) {\n      this._deliberateClose = true;\n      this._connectionAuthenticationTimeout = true;\n      this._client._$onError(C.TOPIC.CONNECTION, message.data[0], message.data[1]);\n    }\n  }\n};\n\n/**\n * Callback for messages received for the AUTH topic. If\n * the authentication was successful this method will\n * open the connection and send all messages that the client\n * tried to send so far.\n *\n * @param   {Object} message parsed auth message\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._handleAuthResponse = function (message) {\n  if (message.action === C.ACTIONS.ERROR) {\n\n    if (message.data[0] === C.EVENT.TOO_MANY_AUTH_ATTEMPTS) {\n      this._deliberateClose = true;\n      this._tooManyAuthAttempts = true;\n    } else if (message.data[0] === C.EVENT.INVALID_AUTH_MSG) {\n      this._deliberateClose = true;\n\n      if (this._authCallback) {\n        this._authCallback(false, 'invalid authentication message');\n      }\n\n      return;\n    } else {\n      this._setState(C.CONNECTION_STATE.AWAITING_AUTHENTICATION);\n    }\n\n    if (this._authCallback) {\n      this._authCallback(false, this._getAuthData(message.data[1]));\n    }\n  } else if (message.action === C.ACTIONS.ACK) {\n    this._setState(C.CONNECTION_STATE.OPEN);\n\n    if (this._authCallback) {\n      this._authCallback(true, this._getAuthData(message.data[0]));\n    }\n\n    this._sendQueuedMessages();\n  }\n};\n\n/**\n * Checks if data is present with login ack and converts it\n * to the correct type\n *\n * @param {Object} message parsed and validated deepstream message\n *\n * @private\n * @returns {object}\n */\nConnection.prototype._getAuthData = function (data) {\n  if (data === undefined) {\n    return null;\n  }\n  return messageParser.convertTyped(data, this._client);\n};\n\n/**\n * Updates the connection state and emits the\n * connectionStateChanged event on the client\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._setState = function (state) {\n  this._state = state;\n  this._client.emit(C.EVENT.CONNECTION_STATE_CHANGED, state);\n};\n\n/**\n * If the connection drops or is closed in error this\n * method schedules increasing reconnection intervals\n *\n * If the number of failed reconnection attempts exceeds\n * options.maxReconnectAttempts the connection is closed\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._tryReconnect = function () {\n  if (this._reconnectTimeout !== null) {\n    return;\n  }\n\n  if (this._reconnectionAttempt < this._options.maxReconnectAttempts) {\n    this._setState(C.CONNECTION_STATE.RECONNECTING);\n    this._reconnectTimeout = setTimeout(this._tryOpen.bind(this), Math.min(this._options.maxReconnectInterval, this._options.reconnectIntervalIncrement * this._reconnectionAttempt));\n    this._reconnectionAttempt++;\n  } else {\n    this._clearReconnect();\n    this.close();\n    this._client.emit(C.EVENT.MAX_RECONNECTION_ATTEMPTS_REACHED, this._reconnectionAttempt);\n  }\n};\n\n/**\n * Attempts to open a errourosly closed connection\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._tryOpen = function () {\n  if (this._originalUrl !== this._url) {\n    this._url = this._originalUrl;\n  }\n  this._createEndpoint();\n  this._reconnectTimeout = null;\n};\n\n/**\n * Stops all further reconnection attempts,\n * either because the connection is open again\n * or because the maximal number of reconnection\n * attempts has been exceeded\n *\n * @private\n * @returns {void}\n */\nConnection.prototype._clearReconnect = function () {\n  clearTimeout(this._reconnectTimeout);\n  this._reconnectTimeout = null;\n  this._reconnectionAttempt = 0;\n};\n\nmodule.exports = Connection;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../constants/constants\":11,\"../utils/utils\":31,\"./message-builder\":16,\"./message-parser\":17,\"ws\":2}],16:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar C = _dereq_('../constants/constants');\n\nvar SEP = C.MESSAGE_PART_SEPERATOR;\n\n/**\n * Creates a deepstream message string, based on the\n * provided parameters\n *\n * @param   {String} topic  One of CONSTANTS.TOPIC\n * @param   {String} action One of CONSTANTS.ACTIONS\n * @param   {Array} data An array of strings or JSON-serializable objects\n *\n * @returns {String} deepstream message string\n */\nexports.getMsg = function (topic, action, data) {\n  if (data && !(data instanceof Array)) {\n    throw new Error('data must be an array');\n  }\n  var sendData = [topic, action];\n\n  if (data) {\n    for (var i = 0; i < data.length; i++) {\n      if (_typeof(data[i]) === 'object') {\n        sendData.push(JSON.stringify(data[i]));\n      } else {\n        sendData.push(data[i]);\n      }\n    }\n  }\n\n  return sendData.join(SEP) + C.MESSAGE_SEPERATOR;\n};\n\n/**\n * Converts a serializable value into its string-representation and adds\n * a flag that provides instructions on how to deserialize it.\n *\n * Please see messageParser.convertTyped for the counterpart of this method\n *\n * @param {Mixed} value\n *\n * @public\n * @returns {String} string representation of the value\n */\nexports.typed = function (value) {\n  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n  if (type === 'string') {\n    return C.TYPES.STRING + value;\n  }\n\n  if (value === null) {\n    return C.TYPES.NULL;\n  }\n\n  if (type === 'object') {\n    return C.TYPES.OBJECT + JSON.stringify(value);\n  }\n\n  if (type === 'number') {\n    return C.TYPES.NUMBER + value.toString();\n  }\n\n  if (value === true) {\n    return C.TYPES.TRUE;\n  }\n\n  if (value === false) {\n    return C.TYPES.FALSE;\n  }\n\n  if (value === undefined) {\n    return C.TYPES.UNDEFINED;\n  }\n\n  throw new Error('Can\\'t serialize type ' + value);\n};\n\n},{\"../constants/constants\":11}],17:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\n\n/**\n * Parses ASCII control character seperated\n * message strings into digestable maps\n *\n * @constructor\n */\nvar MessageParser = function MessageParser() {\n  this._actions = this._getActions();\n};\n\n/**\n * Main interface method. Receives a raw message\n * string, containing one or more messages\n * and returns an array of parsed message objects\n * or null for invalid messages\n *\n * @param   {String} message raw message\n *\n * @public\n *\n * @returns {Array} array of parsed message objects\n *                  following the format\n *                  {\n *                    raw: <original message string>\n *                    topic: <string>\n *                    action: <string - shortcode>\n *                    data: <array of strings>\n *                  }\n */\nMessageParser.prototype.parse = function (message, client) {\n  var parsedMessages = [];\n  var rawMessages = message.split(C.MESSAGE_SEPERATOR);\n\n  for (var i = 0; i < rawMessages.length; i++) {\n    if (rawMessages[i].length > 2) {\n      parsedMessages.push(this._parseMessage(rawMessages[i], client));\n    }\n  }\n\n  return parsedMessages;\n};\n\n/**\n * Deserializes values created by MessageBuilder.typed to\n * their original format\n *\n * @param {String} value\n *\n * @public\n * @returns {Mixed} original value\n */\nMessageParser.prototype.convertTyped = function (value, client) {\n  var type = value.charAt(0);\n\n  if (type === C.TYPES.STRING) {\n    return value.substr(1);\n  }\n\n  if (type === C.TYPES.OBJECT) {\n    try {\n      return JSON.parse(value.substr(1));\n    } catch (e) {\n      client._$onError(C.TOPIC.ERROR, C.EVENT.MESSAGE_PARSE_ERROR, e.toString() + '(' + value + ')');\n      return undefined;\n    }\n  }\n\n  if (type === C.TYPES.NUMBER) {\n    return parseFloat(value.substr(1));\n  }\n\n  if (type === C.TYPES.NULL) {\n    return null;\n  }\n\n  if (type === C.TYPES.TRUE) {\n    return true;\n  }\n\n  if (type === C.TYPES.FALSE) {\n    return false;\n  }\n\n  if (type === C.TYPES.UNDEFINED) {\n    return undefined;\n  }\n\n  client._$onError(C.TOPIC.ERROR, C.EVENT.MESSAGE_PARSE_ERROR, 'UNKNOWN_TYPE (' + value + ')');\n  return undefined;\n};\n\n/**\n * Turns the ACTION:SHORTCODE constants map\n * around to facilitate shortcode lookup\n *\n * @private\n *\n * @returns {Object} actions\n */\nMessageParser.prototype._getActions = function () {\n  var actions = {};\n\n  for (var key in C.ACTIONS) {\n    actions[C.ACTIONS[key]] = key;\n  }\n\n  return actions;\n};\n\n/**\n * Parses an individual message (as oppnosed to a\n * block of multiple messages as is processed by .parse())\n *\n * @param   {String} message\n *\n * @private\n *\n * @returns {Object} parsedMessage\n */\nMessageParser.prototype._parseMessage = function (message, client) {\n  var parts = message.split(C.MESSAGE_PART_SEPERATOR);\n  var messageObject = {};\n\n  if (parts.length < 2) {\n    client._$onError(C.TOPIC.ERROR, C.EVENT.MESSAGE_PARSE_ERROR, 'Insufficiant message parts');\n    return null;\n  }\n\n  if (this._actions[parts[1]] === undefined) {\n    client._$onError(C.TOPIC.ERROR, C.EVENT.MESSAGE_PARSE_ERROR, 'Unknown action ' + parts[1]);\n    return null;\n  }\n\n  messageObject.raw = message;\n  messageObject.topic = parts[0];\n  messageObject.action = parts[1];\n  messageObject.data = parts.splice(2);\n\n  return messageObject;\n};\n\nmodule.exports = new MessageParser();\n\n},{\"../constants/constants\":11}],18:[function(_dereq_,module,exports){\n'use strict';\n\nvar EventEmitter = _dereq_('component-emitter2');\nvar C = _dereq_('../constants/constants');\nvar ResubscribeNotifier = _dereq_('../utils/resubscribe-notifier');\n\n/**\n * The main class for presence in deepstream\n *\n * Provides the presence interface and handles incoming messages\n * on the presence topic\n *\n * @param {Object} options deepstream configuration options\n * @param {Connection} connection\n * @param {Client} client\n *\n * @constructor\n * @public\n */\nvar PresenceHandler = function PresenceHandler(options, connection, client) {\n  this._options = options;\n  this._connection = connection;\n  this._client = client;\n  this._emitter = new EventEmitter();\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._resubscribeNotifier = new ResubscribeNotifier(this._client, this._resubscribe.bind(this));\n};\n\n/**\n * Queries for clients logged into deepstream.\n *\n * @param   {Function} callback Will be invoked with an array of clients\n *\n * @public\n * @returns {void}\n */\nPresenceHandler.prototype.getAll = function (callback) {\n  if (!this._emitter.hasListeners(C.ACTIONS.QUERY)) {\n    // At least one argument is required for a message to be permissionable\n    this._connection.sendMsg(C.TOPIC.PRESENCE, C.ACTIONS.QUERY, [C.ACTIONS.QUERY]);\n  }\n  this._emitter.once(C.ACTIONS.QUERY, callback);\n};\n\n/**\n * Subscribes to client logins or logouts in deepstream\n *\n * @param   {Function} callback Will be invoked with the username of a client,\n *                              and a boolean to indicate if it was a login or\n *                              logout event\n * @public\n * @returns {void}\n */\nPresenceHandler.prototype.subscribe = function (callback) {\n  if (callback !== undefined && typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  if (!this._emitter.hasListeners(C.TOPIC.PRESENCE)) {\n    this._ackTimeoutRegistry.add({\n      topic: C.TOPIC.PRESENCE,\n      action: C.ACTIONS.SUBSCRIBE,\n      name: C.TOPIC.PRESENCE\n    });\n    this._connection.sendMsg(C.TOPIC.PRESENCE, C.ACTIONS.SUBSCRIBE, [C.ACTIONS.SUBSCRIBE]);\n  }\n\n  this._emitter.on(C.TOPIC.PRESENCE, callback);\n};\n\n/**\n * Removes a callback for a specified presence event\n *\n * @param   {Function} callback The callback to unregister via {PresenceHandler#unsubscribe}\n *\n * @public\n * @returns {void}\n */\nPresenceHandler.prototype.unsubscribe = function (callback) {\n  if (callback !== undefined && typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  this._emitter.off(C.TOPIC.PRESENCE, callback);\n\n  if (!this._emitter.hasListeners(C.TOPIC.PRESENCE)) {\n    this._ackTimeoutRegistry.add({\n      topic: C.TOPIC.PRESENCE,\n      action: C.ACTIONS.UNSUBSCRIBE,\n      name: C.TOPIC.PRESENCE\n    });\n    this._connection.sendMsg(C.TOPIC.PRESENCE, C.ACTIONS.UNSUBSCRIBE, [C.ACTIONS.UNSUBSCRIBE]);\n  }\n};\n\n/**\n * Handles incoming messages from the server\n *\n * @param   {Object} message parsed deepstream message\n *\n * @package private\n * @returns {void}\n */\nPresenceHandler.prototype._$handle = function (message) {\n  if (message.action === C.ACTIONS.ERROR && message.data[0] === C.EVENT.MESSAGE_DENIED) {\n    this._ackTimeoutRegistry.remove(C.TOPIC.PRESENCE, message.data[1]);\n    message.processedError = true;\n    this._client._$onError(C.TOPIC.PRESENCE, C.EVENT.MESSAGE_DENIED, message.data[1]);\n  } else if (message.action === C.ACTIONS.ACK) {\n    this._ackTimeoutRegistry.clear(message);\n  } else if (message.action === C.ACTIONS.PRESENCE_JOIN) {\n    this._emitter.emit(C.TOPIC.PRESENCE, message.data[0], true);\n  } else if (message.action === C.ACTIONS.PRESENCE_LEAVE) {\n    this._emitter.emit(C.TOPIC.PRESENCE, message.data[0], false);\n  } else if (message.action === C.ACTIONS.QUERY) {\n    this._emitter.emit(C.ACTIONS.QUERY, message.data);\n  } else {\n    this._client._$onError(C.TOPIC.PRESENCE, C.EVENT.UNSOLICITED_MESSAGE, message.action);\n  }\n};\n\n/**\n * Resubscribes to presence subscription when connection is lost\n *\n * @package private\n * @returns {void}\n */\nPresenceHandler.prototype._resubscribe = function () {\n  var callbacks = this._emitter._callbacks;\n  if (callbacks && callbacks[C.TOPIC.PRESENCE]) {\n    this._connection.sendMsg(C.TOPIC.PRESENCE, C.ACTIONS.SUBSCRIBE, [C.ACTIONS.SUBSCRIBE]);\n  }\n};\n\nmodule.exports = PresenceHandler;\n\n},{\"../constants/constants\":11,\"../utils/resubscribe-notifier\":29,\"component-emitter2\":1}],19:[function(_dereq_,module,exports){\n'use strict';\n/* eslint-disable prefer-rest-params, prefer-spread */\n\nvar Record = _dereq_('./record');\nvar EventEmitter = _dereq_('component-emitter2');\n\n/**\n * An AnonymousRecord is a record without a predefined name. It\n * acts like a wrapper around an actual record that can\n * be swapped out for another one whilst keeping all bindings intact.\n *\n * Imagine a customer relationship management system with a list of users\n * on the left and a user detail panel on the right. The user detail\n * panel could use the anonymous record to set up its bindings, yet whenever\n * a user is chosen from the list of existing users the anonymous record's\n * setName method is called and the detail panel will update to\n * show the selected user's details\n *\n * @param {RecordHandler} recordHandler\n *\n * @constructor\n */\nvar AnonymousRecord = function AnonymousRecord(recordHandler) {\n  this.name = null;\n  this._recordHandler = recordHandler;\n  this._record = null;\n  this._subscriptions = [];\n  this._proxyMethod('delete');\n  this._proxyMethod('set');\n  this._proxyMethod('discard');\n};\n\nEventEmitter(AnonymousRecord.prototype); // eslint-disable-line\n\n/**\n * Proxies the actual record's get method. It is valid\n * to call get prior to setName - if no record exists,\n * the method returns undefined\n *\n * @param   {[String]} path A json path. If non is provided,\n *                          the entire record is returned.\n *\n * @public\n * @returns {mixed}    the value of path or the entire object\n */\nAnonymousRecord.prototype.get = function (path) {\n  if (this._record === null) {\n    return undefined;\n  }\n\n  return this._record.get(path);\n};\n\n/**\n * Proxies the actual record's subscribe method. The same parameters\n * can be used. Can be called prior to setName(). Please note, triggerIfReady\n * will always be set to true to reflect changes in the underlying record.\n *\n * @param   {[String]} path   A json path. If non is provided,\n *                              it subscribes to changes for the entire record.\n *\n * @param   {Function} callback A callback function that will be invoked whenever\n *                              the subscribed path or record updates\n *\n * @public\n * @returns {void}\n */\nAnonymousRecord.prototype.subscribe = function () {\n  var parameters = Record.prototype._normalizeArguments(arguments);\n  parameters.triggerNow = true;\n  this._subscriptions.push(parameters);\n\n  if (this._record !== null) {\n    this._record.subscribe(parameters);\n  }\n};\n\n/**\n * Proxies the actual record's unsubscribe method. The same parameters\n * can be used. Can be called prior to setName()\n *\n * @param   {[String]} path   A json path. If non is provided,\n *                              it subscribes to changes for the entire record.\n *\n * @param   {Function} callback A callback function that will be invoked whenever\n *                              the subscribed path or record updates\n *\n * @public\n * @returns {void}\n */\nAnonymousRecord.prototype.unsubscribe = function () {\n  var parameters = Record.prototype._normalizeArguments(arguments);\n  var subscriptions = [];\n  var i = void 0;\n\n  for (i = 0; i < this._subscriptions.length; i++) {\n    if (this._subscriptions[i].path !== parameters.path || this._subscriptions[i].callback !== parameters.callback) {\n      subscriptions.push(this._subscriptions[i]);\n    }\n  }\n\n  this._subscriptions = subscriptions;\n\n  if (this._record !== null) {\n    this._record.unsubscribe(parameters);\n  }\n};\n\n/**\n * Sets the underlying record the anonymous record is bound\n * to. Can be called multiple times.\n *\n * @param {String} recordName\n *\n * @public\n * @returns {void}\n */\nAnonymousRecord.prototype.setName = function (recordName) {\n  if (this.name === recordName) {\n    return;\n  }\n\n  this.name = recordName;\n\n  var i = void 0;\n\n  if (this._record !== null && !this._record.isDestroyed) {\n    for (i = 0; i < this._subscriptions.length; i++) {\n      this._record.unsubscribe(this._subscriptions[i]);\n    }\n    this._record.discard();\n  }\n\n  this._record = this._recordHandler.getRecord(recordName);\n\n  for (i = 0; i < this._subscriptions.length; i++) {\n    this._record.subscribe(this._subscriptions[i]);\n  }\n\n  this._record.whenReady(this.emit.bind(this, 'ready'));\n  this.emit('nameChanged', recordName);\n};\n\n/**\n * Adds the specified method to this method and forwards it\n * to _callMethodOnRecord\n *\n * @param   {String} methodName\n *\n * @private\n * @returns {void}\n */\nAnonymousRecord.prototype._proxyMethod = function (methodName) {\n  this[methodName] = this._callMethodOnRecord.bind(this, methodName);\n};\n\n/**\n * Invokes the specified method with the provided parameters on\n * the underlying record. Throws erros if the method is not\n * specified yet or doesn't expose the method in question\n *\n * @param   {String} methodName\n *\n * @private\n * @returns {Mixed} the return value of the actual method\n */\nAnonymousRecord.prototype._callMethodOnRecord = function (methodName) {\n  if (this._record === null) {\n    throw new Error('Can`t invoke ' + methodName + '. AnonymousRecord not initialised. Call setName first');\n  }\n\n  if (typeof this._record[methodName] !== 'function') {\n    throw new Error(methodName + ' is not a method on the record');\n  }\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  return this._record[methodName].apply(this._record, args);\n};\n\nmodule.exports = AnonymousRecord;\n\n},{\"./record\":23,\"component-emitter2\":1}],20:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar utils = _dereq_('../utils/utils');\n\nvar PARTS_REG_EXP = /([^.[\\]\\s]+)/g;\nvar cache = Object.create(null);\n\n/**\n * Returns the value of the path or\n * undefined if the path can't be resolved\n *\n * @public\n * @returns {Mixed}\n */\nmodule.exports.get = function (data, path, deepCopy) {\n  var tokens = tokenize(path);\n  var value = data;\n  for (var i = 0; i < tokens.length; i++) {\n    if (value === undefined) {\n      return undefined;\n    }\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      throw new Error('invalid data or path');\n    }\n    value = value[tokens[i]];\n  }\n\n  return deepCopy !== false ? utils.deepCopy(value) : value;\n};\n\n/**\n * Sets the value of the path. If the path (or parts\n * of it) doesn't exist yet, it will be created\n *\n * @param {Mixed} value\n *\n * @public\n * @returns {Mixed} updated value\n */\nmodule.exports.set = function (data, path, value, deepCopy) {\n  var tokens = tokenize(path);\n\n  if (tokens.length === 0) {\n    return patch(data, value, deepCopy);\n  }\n\n  var oldValue = module.exports.get(data, path, false);\n  var newValue = patch(oldValue, value, deepCopy);\n\n  if (newValue === oldValue) {\n    return data;\n  }\n\n  var result = utils.shallowCopy(data);\n\n  var node = result;\n  for (var i = 0; i < tokens.length; i++) {\n    if (i === tokens.length - 1) {\n      node[tokens[i]] = newValue;\n    } else if (node[tokens[i]] !== undefined) {\n      node = node[tokens[i]] = utils.shallowCopy(node[tokens[i]]);\n    } else if (tokens[i + 1] && !isNaN(tokens[i + 1])) {\n      node = node[tokens[i]] = [];\n    } else {\n      node = node[tokens[i]] = Object.create(null);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Merge the new value into the old value\n * @param  {Mixed} oldValue\n * @param  {Mixed} newValue\n * @param  {boolean} deepCopy\n * @return {Mixed}\n */\nfunction patch(oldValue, newValue, deepCopy) {\n  var i = void 0;\n  var j = void 0;\n  if (oldValue === null || newValue === null) {\n    return newValue;\n  } else if (Array.isArray(oldValue) && Array.isArray(newValue)) {\n    var arr = void 0;\n    for (i = 0; i < newValue.length; i++) {\n      var value = patch(oldValue[i], newValue[i], false);\n      if (!arr) {\n        if (value === oldValue[i]) {\n          continue;\n        }\n        arr = [];\n        for (j = 0; j < i; ++j) {\n          arr[j] = oldValue[j];\n        }\n      }\n      arr[i] = value;\n    }\n    arr = arr && deepCopy !== false ? utils.deepCopy(arr) : arr;\n    arr = arr || (oldValue.length === newValue.length ? oldValue : newValue);\n    return arr;\n  } else if (!Array.isArray(newValue) && (typeof oldValue === 'undefined' ? 'undefined' : _typeof(oldValue)) === 'object' && (typeof newValue === 'undefined' ? 'undefined' : _typeof(newValue)) === 'object') {\n    var obj = void 0;\n    var props = Object.keys(newValue);\n    for (i = 0; i < props.length; i++) {\n      var _value = patch(oldValue[props[i]], newValue[props[i]], false);\n      if (!obj) {\n        if (_value === oldValue[props[i]]) {\n          continue;\n        }\n        obj = Object.create(null);\n        for (j = 0; j < i; ++j) {\n          obj[props[j]] = oldValue[props[j]];\n        }\n      }\n      obj[props[i]] = newValue[props[i]];\n    }\n    obj = obj && deepCopy !== false ? utils.deepCopy(obj) : obj;\n    obj = obj || (Object.keys(oldValue).length === props.length ? oldValue : newValue);\n    return obj;\n  } else if (newValue !== oldValue) {\n    return deepCopy !== false ? utils.deepCopy(newValue) : newValue;\n  }\n\n  return oldValue;\n}\n\n/**\n * Parses the path. Splits it into\n * keys for objects and indices for arrays.\n *\n * @returns Array of tokens\n */\nfunction tokenize(path) {\n  if (cache[path]) {\n    return cache[path];\n  }\n\n  var parts = String(path) !== 'undefined' ? String(path).match(PARTS_REG_EXP) : [];\n\n  if (!parts) {\n    throw new Error('invalid path ' + path);\n  }\n\n  cache[path] = parts;\n  return cache[path];\n}\n\n},{\"../utils/utils\":31}],21:[function(_dereq_,module,exports){\n'use strict';\n/* eslint-disable prefer-rest-params */\n\nvar EventEmitter = _dereq_('component-emitter2');\nvar Record = _dereq_('./record');\nvar C = _dereq_('../constants/constants');\n\nvar ENTRY_ADDED_EVENT = 'entry-added';\nvar ENTRY_REMOVED_EVENT = 'entry-removed';\nvar ENTRY_MOVED_EVENT = 'entry-moved';\n\n/**\n * A List is a specialised Record that contains\n * an Array of recordNames and provides a number\n * of convinience methods for interacting with them.\n *\n * @param {RecordHanlder} recordHandler\n * @param {String} name    The name of the list\n *\n * @constructor\n */\nvar List = function List(recordHandler, name, options) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n\n  this._recordHandler = recordHandler;\n  this._record = this._recordHandler.getRecord(name, options);\n  this._record._applyUpdate = this._applyUpdate.bind(this);\n\n  this._record.on('delete', this.emit.bind(this, 'delete'));\n  this._record.on('discard', this._onDiscard.bind(this));\n  this._record.on('ready', this._onReady.bind(this));\n\n  this.isDestroyed = this._record.isDestroyed;\n  this.isReady = this._record.isReady;\n  this.name = name;\n  this._queuedMethods = [];\n  this._beforeStructure = null;\n  this._hasAddListener = null;\n  this._hasRemoveListener = null;\n  this._hasMoveListener = null;\n\n  this.delete = this._record.delete.bind(this._record);\n  this.discard = this._record.discard.bind(this._record);\n  this.whenReady = this._record.whenReady.bind(this);\n};\n\nEventEmitter(List.prototype); // eslint-disable-line\n\n/**\n * Returns the array of list entries or an\n * empty array if the list hasn't been populated yet.\n *\n * @public\n * @returns {Array} entries\n */\nList.prototype.getEntries = function () {\n  var entries = this._record.get();\n\n  if (!(entries instanceof Array)) {\n    return [];\n  }\n\n  return entries;\n};\n\n/**\n * Returns true if the list is empty\n *\n * @public\n * @returns {Boolean} isEmpty\n */\nList.prototype.isEmpty = function () {\n  return this.getEntries().length === 0;\n};\n\n/**\n * Updates the list with a new set of entries\n *\n * @public\n * @param {Array} entries\n */\nList.prototype.setEntries = function (entries) {\n  var errorMsg = 'entries must be an array of record names';\n  var i = void 0;\n\n  if (!(entries instanceof Array)) {\n    throw new Error(errorMsg);\n  }\n\n  for (i = 0; i < entries.length; i++) {\n    if (typeof entries[i] !== 'string') {\n      throw new Error(errorMsg);\n    }\n  }\n\n  if (this._record.isReady === false) {\n    this._queuedMethods.push(this.setEntries.bind(this, entries));\n  } else {\n    this._beforeChange();\n    this._record.set(entries);\n    this._afterChange();\n  }\n};\n\n/**\n * Removes an entry from the list\n *\n * @param {String} entry\n * @param {Number} [index]\n *\n * @public\n * @returns {void}\n */\nList.prototype.removeEntry = function (entry, index) {\n  if (this._record.isReady === false) {\n    this._queuedMethods.push(this.removeEntry.bind(this, entry, index));\n    return;\n  }\n\n  var currentEntries = this._record.get();\n  var hasIndex = this._hasIndex(index);\n  var entries = [];\n  var i = void 0;\n\n  for (i = 0; i < currentEntries.length; i++) {\n    if (currentEntries[i] !== entry || hasIndex && index !== i) {\n      entries.push(currentEntries[i]);\n    }\n  }\n  this._beforeChange();\n  this._record.set(entries);\n  this._afterChange();\n};\n\n/**\n * Adds an entry to the list\n *\n * @param {String} entry\n * @param {Number} [index]\n *\n * @public\n * @returns {void}\n */\nList.prototype.addEntry = function (entry, index) {\n  if (typeof entry !== 'string') {\n    throw new Error('Entry must be a recordName');\n  }\n\n  if (this._record.isReady === false) {\n    this._queuedMethods.push(this.addEntry.bind(this, entry, index));\n    return;\n  }\n\n  var hasIndex = this._hasIndex(index);\n  var entries = this.getEntries();\n  if (hasIndex) {\n    entries.splice(index, 0, entry);\n  } else {\n    entries.push(entry);\n  }\n  this._beforeChange();\n  this._record.set(entries);\n  this._afterChange();\n};\n\n/**\n * Proxies the underlying Record's subscribe method. Makes sure\n * that no path is provided\n *\n * @public\n * @returns {void}\n */\nList.prototype.subscribe = function () {\n  var parameters = Record.prototype._normalizeArguments(arguments);\n\n  if (parameters.path) {\n    throw new Error('path is not supported for List.subscribe');\n  }\n\n  // Make sure the callback is invoked with an empty array for new records\n  var listCallback = function (callback) {\n    callback(this.getEntries());\n  }.bind(this, parameters.callback);\n\n  /**\n  * Adding a property onto a function directly is terrible practice,\n  * and we will change this as soon as we have a more seperate approach\n  * of creating lists that doesn't have records default state.\n  *\n  * The reason we are holding a referencing to wrapped array is so that\n  * on unsubscribe it can provide a reference to the actual method the\n  * record is subscribed too.\n  **/\n  parameters.callback.wrappedCallback = listCallback;\n  parameters.callback = listCallback;\n\n  this._record.subscribe(parameters);\n};\n\n/**\n * Proxies the underlying Record's unsubscribe method. Makes sure\n * that no path is provided\n *\n * @public\n * @returns {void}\n */\nList.prototype.unsubscribe = function () {\n  var parameters = Record.prototype._normalizeArguments(arguments);\n\n  if (parameters.path) {\n    throw new Error('path is not supported for List.unsubscribe');\n  }\n\n  parameters.callback = parameters.callback.wrappedCallback;\n  this._record.unsubscribe(parameters);\n};\n\n/**\n * Listens for changes in the Record's ready state\n * and applies them to this list\n *\n * @private\n * @returns {void}\n */\nList.prototype._onReady = function () {\n  this.isReady = true;\n\n  for (var i = 0; i < this._queuedMethods.length; i++) {\n    this._queuedMethods[i]();\n  }\n\n  this._queuedMethods = [];\n  this.emit('ready');\n};\n\n/**\n * Listens for the record discard event and applies\n * changes to list\n *\n * @private\n * @returns {void}\n */\nList.prototype._onDiscard = function () {\n  this.isDestroyed = true;\n  this.emit('discard');\n};\n\n/**\n * Proxies the underlying Record's _update method. Set's\n * data to an empty array if no data is provided.\n *\n * @param   {null}   path must (should :-)) be null\n * @param   {Array}  data\n *\n * @private\n * @returns {void}\n */\nList.prototype._applyUpdate = function (message) {\n  if (message.action === C.ACTIONS.PATCH) {\n    throw new Error('PATCH is not supported for Lists');\n  }\n\n  if (message.data[2].charAt(0) !== '[') {\n    message.data[2] = '[]';\n  }\n\n  this._beforeChange();\n  Record.prototype._applyUpdate.call(this._record, message);\n  this._afterChange();\n};\n\n/**\n * Validates that the index provided is within the current set of entries.\n *\n * @param {Number} index\n *\n * @private\n * @returns {Number}\n */\nList.prototype._hasIndex = function (index) {\n  var hasIndex = false;\n  var entries = this.getEntries();\n  if (index !== undefined) {\n    if (isNaN(index)) {\n      throw new Error('Index must be a number');\n    }\n    if (index !== entries.length && (index >= entries.length || index < 0)) {\n      throw new Error('Index must be within current entries');\n    }\n    hasIndex = true;\n  }\n  return hasIndex;\n};\n\n/**\n * Establishes the current structure of the list, provided the client has attached any\n * add / move / remove listener\n *\n * This will be called before any change to the list, regardsless if the change was triggered\n * by an incoming message from the server or by the client\n *\n * @private\n * @returns {void}\n */\nList.prototype._beforeChange = function () {\n  this._hasAddListener = this.listeners(ENTRY_ADDED_EVENT).length > 0;\n  this._hasRemoveListener = this.listeners(ENTRY_REMOVED_EVENT).length > 0;\n  this._hasMoveListener = this.listeners(ENTRY_MOVED_EVENT).length > 0;\n\n  if (this._hasAddListener || this._hasRemoveListener || this._hasMoveListener) {\n    this._beforeStructure = this._getStructure();\n  } else {\n    this._beforeStructure = null;\n  }\n};\n\n/**\n * Compares the structure of the list after a change to its previous structure and notifies\n * any add / move / remove listener. Won't do anything if no listeners are attached.\n *\n * @private\n * @returns {void}\n */\nList.prototype._afterChange = function () {\n  if (this._beforeStructure === null) {\n    return;\n  }\n\n  var after = this._getStructure();\n  var before = this._beforeStructure;\n  var entry = void 0;\n  var i = void 0;\n\n  if (this._hasRemoveListener) {\n    for (entry in before) {\n      for (i = 0; i < before[entry].length; i++) {\n        if (after[entry] === undefined || after[entry][i] === undefined) {\n          this.emit(ENTRY_REMOVED_EVENT, entry, before[entry][i]);\n        }\n      }\n    }\n  }\n\n  if (this._hasAddListener || this._hasMoveListener) {\n    for (entry in after) {\n      if (before[entry] === undefined) {\n        for (i = 0; i < after[entry].length; i++) {\n          this.emit(ENTRY_ADDED_EVENT, entry, after[entry][i]);\n        }\n      } else {\n        for (i = 0; i < after[entry].length; i++) {\n          if (before[entry][i] !== after[entry][i]) {\n            if (before[entry][i] === undefined) {\n              this.emit(ENTRY_ADDED_EVENT, entry, after[entry][i]);\n            } else {\n              this.emit(ENTRY_MOVED_EVENT, entry, after[entry][i]);\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n/**\n * Iterates through the list and creates a map with the entry as a key\n * and an array of its position(s) within the list as a value, e.g.\n *\n * {\n *   'recordA': [ 0, 3 ],\n *   'recordB': [ 1 ],\n *   'recordC': [ 2 ]\n * }\n *\n * @private\n * @returns {Array} structure\n */\nList.prototype._getStructure = function () {\n  var structure = {};\n  var i = void 0;\n  var entries = this._record.get();\n\n  for (i = 0; i < entries.length; i++) {\n    if (structure[entries[i]] === undefined) {\n      structure[entries[i]] = [i];\n    } else {\n      structure[entries[i]].push(i);\n    }\n  }\n\n  return structure;\n};\n\nmodule.exports = List;\n\n},{\"../constants/constants\":11,\"./record\":23,\"component-emitter2\":1}],22:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Record = _dereq_('./record');\nvar AnonymousRecord = _dereq_('./anonymous-record');\nvar List = _dereq_('./list');\nvar Listener = _dereq_('../utils/listener');\nvar SingleNotifier = _dereq_('../utils/single-notifier');\nvar C = _dereq_('../constants/constants');\nvar messageParser = _dereq_('../message/message-parser');\nvar messageBuilder = _dereq_('../message/message-builder');\nvar EventEmitter = _dereq_('component-emitter2');\n\n/**\n * A collection of factories for records. This class\n * is exposed as client.record\n *\n * @param {Object} options    deepstream options\n * @param {Connection} connection\n * @param {Client} client\n */\nvar RecordHandler = function RecordHandler(options, connection, client) {\n  this._options = options;\n  this._connection = connection;\n  this._client = client;\n  this._records = {};\n  this._lists = {};\n  this._listener = {};\n  this._writeCallbacks = {};\n  this._destroyEventEmitter = new EventEmitter();\n\n  this._hasRegistry = new SingleNotifier(client, connection, C.TOPIC.RECORD, C.ACTIONS.HAS, this._options.recordReadTimeout);\n  this._snapshotRegistry = new SingleNotifier(client, connection, C.TOPIC.RECORD, C.ACTIONS.SNAPSHOT, this._options.recordReadTimeout);\n};\n\n/**\n * Returns an existing record or creates a new one.\n *\n * @param   {String} name              the unique name of the record\n * @param   {[Object]} recordOptions   A map of parameters for this particular record.\n *                                      { persist: true }\n *\n * @public\n * @returns {Record}\n */\nRecordHandler.prototype.getRecord = function (name, recordOptions) {\n  if (!this._records[name]) {\n    this._records[name] = new Record(name, recordOptions || {}, this._connection, this._options, this._client);\n    this._records[name].on('error', this._onRecordError.bind(this, name));\n    this._records[name].on('destroyPending', this._onDestroyPending.bind(this, name));\n    this._records[name].on('delete', this._removeRecord.bind(this, name));\n    this._records[name].on('discard', this._removeRecord.bind(this, name));\n  }\n\n  this._records[name].usages++;\n\n  return this._records[name];\n};\n\n/**\n * Returns an existing List or creates a new one. A list is a specialised\n * type of record that holds an array of recordNames.\n *\n * @param   {String} name       the unique name of the list\n * @param   {[Object]} options   A map of parameters for this particular list.\n *                              { persist: true }\n *\n * @public\n * @returns {List}\n */\nRecordHandler.prototype.getList = function (name, options) {\n  if (!this._lists[name]) {\n    this._lists[name] = new List(this, name, options);\n  } else {\n    this._records[name].usages++;\n  }\n  return this._lists[name];\n};\n\n/**\n * Returns an anonymous record. A anonymous record is effectively\n * a wrapper that mimicks the API of a record, but allows for the\n * underlying record to be swapped without loosing subscriptions etc.\n *\n * This is particularly useful when selecting from a number of similarly\n * structured records. E.g. a list of users that can be choosen from a list\n *\n * The only API difference to a normal record is an additional setName( name ) method.\n *\n *\n * @public\n * @returns {AnonymousRecord}\n */\nRecordHandler.prototype.getAnonymousRecord = function () {\n  return new AnonymousRecord(this);\n};\n\n/**\n * Allows to listen for record subscriptions made by this or other clients. This\n * is useful to create \"active\" data providers, e.g. providers that only provide\n * data for a particular record if a user is actually interested in it\n *\n * @param   {String}   pattern  A combination of alpha numeric characters and wildcards( * )\n * @param   {Function} callback\n *\n * @public\n * @returns {void}\n */\nRecordHandler.prototype.listen = function (pattern, callback) {\n  if (typeof pattern !== 'string' || pattern.length === 0) {\n    throw new Error('invalid argument pattern');\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  if (this._listener[pattern] && !this._listener[pattern].destroyPending) {\n    this._client._$onError(C.TOPIC.RECORD, C.EVENT.LISTENER_EXISTS, pattern);\n    return;\n  }\n\n  if (this._listener[pattern]) {\n    this._listener[pattern].destroy();\n  }\n\n  this._listener[pattern] = new Listener(C.TOPIC.RECORD, pattern, callback, this._options, this._client, this._connection);\n};\n\n/**\n * Removes a listener that was previously registered with listenForSubscriptions\n *\n * @param   {String}   pattern  A combination of alpha numeric characters and wildcards( * )\n * @param   {Function} callback\n *\n * @public\n * @returns {void}\n */\nRecordHandler.prototype.unlisten = function (pattern) {\n  if (typeof pattern !== 'string' || pattern.length === 0) {\n    throw new Error('invalid argument pattern');\n  }\n\n  var listener = this._listener[pattern];\n  if (listener && !listener.destroyPending) {\n    listener.sendDestroy();\n  } else if (this._listener[pattern]) {\n    this._listener[pattern].destroy();\n    delete this._listener[pattern];\n  } else {\n    this._client._$onError(C.TOPIC.RECORD, C.EVENT.NOT_LISTENING, pattern);\n  }\n};\n\n/**\n * Retrieve the current record data without subscribing to changes\n *\n * @param   {String}  name the unique name of the record\n * @param   {Function}  callback\n *\n * @public\n */\nRecordHandler.prototype.snapshot = function (name, callback) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n\n  if (this._records[name] && this._records[name].isReady) {\n    callback(null, this._records[name].get());\n  } else {\n    this._snapshotRegistry.request(name, callback);\n  }\n};\n\n/**\n * Allows the user to query to see whether or not the record exists.\n *\n * @param   {String}  name the unique name of the record\n * @param   {Function}  callback\n *\n * @public\n */\nRecordHandler.prototype.has = function (name, callback) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n\n  if (this._records[name]) {\n    callback(null, true);\n  } else {\n    this._hasRegistry.request(name, callback);\n  }\n};\n\n/**\n * Allows setting the data for a record without being subscribed to it. If\n * the client is subscribed to the record locally, the update will be proxied\n * through the record object like a normal call to Record.set. Otherwise a force\n * write will be performed that overwrites any remote data.\n *\n * @param {String} recordName the name of the record to write to\n * @param {String|Object} pathOrData either the path to write data to or the data to\n *                                   set the record to\n * @param {Object|Primitive|Function} dataOrCallback either the data to write to the\n *                                                   record or a callback function\n *                                                   indicating write success\n * @param {Function} callback if provided this will be called with the result of the\n *                            write\n */\nRecordHandler.prototype.setData = function (recordName, pathOrData, dataOrCallback, callback) {\n  var path = void 0;\n  var data = void 0;\n  var cb = void 0;\n  var valid = false;\n\n  if (arguments.length === 4) {\n    // setData(recordName, path, data, cb)\n    path = pathOrData;\n    data = dataOrCallback;\n    cb = callback;\n    valid = true;\n  } else if (arguments.length === 3) {\n    if (typeof pathOrData === 'string' && typeof dataOrCallback !== 'function') {\n      // setData(recordName, path, data)\n      path = pathOrData;\n      data = dataOrCallback;\n      valid = true;\n    } else if ((typeof pathOrData === 'undefined' ? 'undefined' : _typeof(pathOrData)) === 'object' && typeof dataOrCallback === 'function') {\n      // setData(recordName, data, callback)\n      path = null;\n      data = pathOrData;\n      cb = dataOrCallback;\n      valid = true;\n    }\n  } else if (arguments.length === 2 && (typeof pathOrData === 'undefined' ? 'undefined' : _typeof(pathOrData)) === 'object') {\n    // setData(recordName, data)\n    data = pathOrData;\n    valid = true;\n  }\n\n  if (!valid) {\n    throw new Error('incorrect arguments used: records must exist as objects at the root level');\n  }\n\n  var record = this._records[recordName];\n  if (record) {\n    if (path && cb) {\n      record.set(path, data, cb);\n    } else if (path) {\n      record.set(path, data);\n    } else if (cb) {\n      record.set(data, cb);\n    } else {\n      record.set(data);\n    }\n  } else {\n    var recordData = path ? [recordName, -1, path, messageBuilder.typed(data)] : [recordName, -1, data];\n    var config = {};\n    if (cb) {\n      config.writeSuccess = true;\n      this._writeCallbacks[recordName] = {};\n      this._writeCallbacks[recordName][-1] = cb;\n    }\n    recordData.push(config);\n    this._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.CREATEANDUPDATE, recordData);\n  }\n};\n\n/**\n * Will be called by the client for incoming messages on the RECORD topic\n *\n * @param   {Object} message parsed and validated deepstream message\n *\n * @package private\n * @returns {void}\n */\nRecordHandler.prototype._$handle = function (message) {\n  var name = void 0;\n\n  if (message.action === C.ACTIONS.ERROR && message.data[0] !== C.EVENT.VERSION_EXISTS && message.data[0] !== C.ACTIONS.SNAPSHOT && message.data[0] !== C.ACTIONS.HAS && message.data[0] !== C.EVENT.MESSAGE_DENIED) {\n    message.processedError = true;\n    this._client._$onError(C.TOPIC.RECORD, message.data[0], message.data[1]);\n    return;\n  }\n\n  if (message.action === C.ACTIONS.ACK || message.action === C.ACTIONS.ERROR) {\n    name = message.data[1];\n\n    /*\n     * The following prevents errors that occur when a record is discarded or deleted and\n     * recreated before the discard / delete ack message is received.\n     *\n     * A (presumably unsolvable) problem remains when a client deletes a record in the exact moment\n     * between another clients creation and read message for the same record\n     */\n    if (message.data[0] === C.ACTIONS.DELETE || message.data[0] === C.ACTIONS.UNSUBSCRIBE || message.data[0] === C.EVENT.MESSAGE_DENIED && message.data[2] === C.ACTIONS.DELETE) {\n      this._destroyEventEmitter.emit('destroy_ack_' + name, message);\n\n      if (message.data[0] === C.ACTIONS.DELETE && this._records[name]) {\n        this._records[name]._$onMessage(message);\n      }\n\n      return;\n    }\n\n    if (message.data[0] === C.ACTIONS.SNAPSHOT) {\n      message.processedError = true;\n      this._snapshotRegistry.recieve(name, message.data[2]);\n      return;\n    }\n\n    if (message.data[0] === C.ACTIONS.HAS) {\n      message.processedError = true;\n      this._snapshotRegistry.recieve(name, message.data[2]);\n      return;\n    }\n  } else {\n    name = message.data[0];\n  }\n\n  var processed = false;\n\n  var record = this._records[name];\n  if (record) {\n    processed = true;\n    record._$onMessage(message);\n  }\n\n  if (message.action === C.ACTIONS.READ && this._snapshotRegistry.hasRequest(name)) {\n    processed = true;\n    this._snapshotRegistry.recieve(name, null, JSON.parse(message.data[2]));\n  } else if (message.action === C.ACTIONS.HAS && this._hasRegistry.hasRequest(name)) {\n    processed = true;\n    this._hasRegistry.recieve(name, null, messageParser.convertTyped(message.data[1]));\n  } else if (message.action === C.ACTIONS.WRITE_ACKNOWLEDGEMENT && !record) {\n    processed = true;\n    Record._handleWriteAcknowledgements(message, this._writeCallbacks[name], this._client);\n  } else if (message.action === C.ACTIONS.ACK && message.data[0] === C.ACTIONS.UNLISTEN && this._listener[name] && this._listener[name].destroyPending) {\n    processed = true;\n    this._listener[name].destroy();\n    delete this._listener[name];\n  } else if (this._listener[name]) {\n    processed = true;\n    this._listener[name]._$onMessage(message);\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED) {\n    // An unlisten ACK was received before an PATTERN_REMOVED which is a valid case\n    processed = true;\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_HAS_PROVIDER) {\n    // record can receive a HAS_PROVIDER after discarding the record\n    processed = true;\n  }\n\n  if (!processed) {\n    message.processedError = true;\n    this._client._$onError(C.TOPIC.RECORD, C.EVENT.UNSOLICITED_MESSAGE, name);\n  }\n};\n\n/**\n * Callback for 'error' events from the record.\n *\n * @param   {String} recordName\n * @param   {String} error\n *\n * @private\n * @returns {void}\n */\nRecordHandler.prototype._onRecordError = function (recordName, error) {\n  this._client._$onError(C.TOPIC.RECORD, error, recordName);\n};\n\n/**\n * When the client calls discard or delete on a record, there is a short delay\n * before the corresponding ACK message is received from the server. To avoid\n * race conditions if the record is re-requested straight away the old record is\n * removed from the cache straight awy and will only listen for one last ACK message\n *\n * @param   {String} recordName The name of the record that was just deleted / discarded\n *\n * @private\n * @returns {void}\n */\nRecordHandler.prototype._onDestroyPending = function (recordName) {\n  if (!this._records[recordName]) {\n    this._client._$onError(C.TOPIC.RECORD, 'Record attempted to be destroyed but does not exists', recordName);\n    return;\n  }\n  var onMessage = this._records[recordName]._$onMessage.bind(this._records[recordName]);\n  this._destroyEventEmitter.once('destroy_ack_' + recordName, onMessage);\n  this._removeRecord(recordName);\n};\n\n/**\n * Callback for 'deleted' and 'discard' events from a record. Removes the record from\n * the registry\n *\n * @param   {String} recordName\n *\n * @returns {void}\n */\nRecordHandler.prototype._removeRecord = function (recordName) {\n  delete this._records[recordName];\n  delete this._lists[recordName];\n};\n\nmodule.exports = RecordHandler;\n\n},{\"../constants/constants\":11,\"../message/message-builder\":16,\"../message/message-parser\":17,\"../utils/listener\":28,\"../utils/single-notifier\":30,\"./anonymous-record\":19,\"./list\":21,\"./record\":23,\"component-emitter2\":1}],23:[function(_dereq_,module,exports){\n'use strict';\n/* eslint-disable prefer-spread, prefer-rest-params */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar jsonPath = _dereq_('./json-path');\nvar ResubscribeNotifier = _dereq_('../utils/resubscribe-notifier');\nvar EventEmitter = _dereq_('component-emitter2');\nvar C = _dereq_('../constants/constants');\nvar messageBuilder = _dereq_('../message/message-builder');\nvar messageParser = _dereq_('../message/message-parser');\nvar utils = _dereq_('../utils/utils');\n\n/**\n * This class represents a single record - an observable\n * dataset returned by client.record.getRecord()\n *\n * @extends {EventEmitter}\n *\n * @param {String} name              The unique name of the record\n * @param {Object} recordOptions     A map of options, e.g. { persist: true }\n * @param {Connection} Connection    The instance of the server connection\n * @param {Object} options        Deepstream options\n * @param {Client} client        deepstream.io client\n *\n * @constructor\n */\nvar Record = function Record(name, recordOptions, connection, options, client) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n\n  this.name = name;\n  this.usages = 0;\n  this._recordOptions = recordOptions;\n  this._connection = connection;\n  this._client = client;\n  this._options = options;\n  this.isReady = false;\n  this.isDestroyed = false;\n  this.hasProvider = false;\n  this._$data = Object.create(null);\n  this.version = null;\n  this._eventEmitter = new EventEmitter();\n  this._queuedMethodCalls = [];\n  this._writeCallbacks = {};\n\n  this._mergeStrategy = null;\n  if (options.mergeStrategy) {\n    this.setMergeStrategy(options.mergeStrategy);\n  }\n\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._resubscribeNotifier = new ResubscribeNotifier(this._client, this._sendRead.bind(this));\n\n  this._readAckTimeout = this._ackTimeoutRegistry.add({\n    topic: C.TOPIC.RECORD,\n    name: name,\n    action: C.ACTIONS.SUBSCRIBE,\n    timeout: this._options.recordReadAckTimeout\n  });\n  this._responseTimeout = this._ackTimeoutRegistry.add({\n    topic: C.TOPIC.RECORD,\n    name: name,\n    action: C.ACTIONS.READ,\n    event: C.EVENT.RESPONSE_TIMEOUT,\n    timeout: this._options.recordReadTimeout\n  });\n  this._sendRead();\n};\n\nEventEmitter(Record.prototype); // eslint-disable-line\n\n/**\n * Set a merge strategy to resolve any merge conflicts that may occur due\n * to offline work or write conflicts. The function will be called with the\n * local record, the remote version/data and a callback to call once the merge has\n * completed or if an error occurs ( which leaves it in an inconsistent state until\n * the next update merge attempt ).\n *\n * @param   {Function} mergeStrategy A Function that can resolve merge issues.\n *\n * @public\n * @returns {void}\n */\nRecord.prototype.setMergeStrategy = function (mergeStrategy) {\n  if (typeof mergeStrategy === 'function') {\n    this._mergeStrategy = mergeStrategy;\n  } else {\n    throw new Error('Invalid merge strategy: Must be a Function');\n  }\n};\n\n/**\n * Returns a copy of either the entire dataset of the record\n * or - if called with a path - the value of that path within\n * the record's dataset.\n *\n * Returning a copy rather than the actual value helps to prevent\n * the record getting out of sync due to unintentional changes to\n * its data\n *\n * @param   {[String]} path A JSON path, e.g. users[ 2 ].firstname\n *\n * @public\n * @returns {Mixed} value\n */\nRecord.prototype.get = function (path) {\n  return jsonPath.get(this._$data, path, this._options.recordDeepCopy);\n};\n\n/**\n * Sets the value of either the entire dataset\n * or of a specific path within the record\n * and submits the changes to the server\n *\n * If the new data is equal to the current data, nothing will happen\n *\n * @param {[String|Object]} pathOrData Either a JSON path when called with\n *                                     two arguments or the data itself\n * @param {Object} data     The data that should be stored in the record\n *\n * @public\n * @returns {void}\n */\nRecord.prototype.set = function (pathOrData, dataOrCallback, callback) {\n  var path = void 0;\n  var data = void 0;\n  if (arguments.length === 1) {\n    // set( object )\n    if ((typeof pathOrData === 'undefined' ? 'undefined' : _typeof(pathOrData)) !== 'object') {\n      throw new Error('invalid argument data');\n    }\n    data = pathOrData;\n  } else if (arguments.length === 2) {\n    if (typeof pathOrData === 'string' && pathOrData.length !== 0 && typeof dataOrCallback !== 'function') {\n      // set( path, data )\n      path = pathOrData;\n      data = dataOrCallback;\n    } else if ((typeof pathOrData === 'undefined' ? 'undefined' : _typeof(pathOrData)) === 'object' && typeof dataOrCallback === 'function') {\n      // set( data, callback )\n      data = pathOrData;\n      callback = dataOrCallback; // eslint-disable-line\n    } else {\n      throw new Error('invalid argument path');\n    }\n  } else if (arguments.length === 3) {\n    // set( path, data, callback )\n    if (typeof pathOrData !== 'string' || pathOrData.length === 0 || typeof callback !== 'function') {\n      throw new Error('invalid arguments, must pass in a string, a value and a function');\n    }\n    path = pathOrData;\n    data = dataOrCallback;\n  }\n\n  if (!path && (data === null || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object')) {\n    throw new Error('invalid arguments, scalar values cannot be set without path');\n  }\n\n  if (this._checkDestroyed('set')) {\n    return this;\n  }\n\n  if (!this.isReady) {\n    this._queuedMethodCalls.push({ method: 'set', args: arguments });\n    return this;\n  }\n\n  var oldValue = this._$data;\n  var newValue = jsonPath.set(oldValue, path, data, this._options.recordDeepCopy);\n\n  if (oldValue === newValue) {\n    if (typeof callback === 'function') {\n      var errorMessage = null;\n      if (!utils.isConnected(this._client)) {\n        errorMessage = 'Connection error: error updating record as connection was closed';\n      }\n      utils.requestIdleCallback(function () {\n        return callback(errorMessage);\n      });\n    }\n    return this;\n  }\n\n  var config = void 0;\n  if (typeof callback === 'function') {\n    config = {};\n    config.writeSuccess = true;\n    if (!utils.isConnected(this._client)) {\n      utils.requestIdleCallback(function () {\n        return callback('Connection error: error updating record as connection was closed');\n      });\n    } else {\n      this._setUpCallback(this.version, callback);\n    }\n  }\n  this._sendUpdate(path, data, config);\n  this._applyChange(newValue);\n  return this;\n};\n\n/**\n * Subscribes to changes to the records dataset.\n *\n * Callback is the only mandatory argument.\n *\n * When called with a path, it will only subscribe to updates\n * to that path, rather than the entire record\n *\n * If called with true for triggerNow, the callback will\n * be called immediatly with the current value\n *\n * @param   {[String]}    path      A JSON path within the record to subscribe to\n * @param   {Function}    callback         Callback function to notify on changes\n * @param   {[Boolean]}   triggerNow      A flag to specify whether the callback should\n *                                         be invoked immediatly with the current value\n *\n * @public\n * @returns {void}\n */\n// eslint-disable-next-line\nRecord.prototype.subscribe = function (path, callback, triggerNow) {\n  var _this = this;\n\n  var args = this._normalizeArguments(arguments);\n\n  if (args.path !== undefined && (typeof args.path !== 'string' || args.path.length === 0)) {\n    throw new Error('invalid argument path');\n  }\n  if (typeof args.callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  if (this._checkDestroyed('subscribe')) {\n    return;\n  }\n\n  if (args.triggerNow) {\n    this.whenReady(function () {\n      _this._eventEmitter.on(args.path, args.callback);\n      args.callback(_this.get(args.path));\n    });\n  } else {\n    this._eventEmitter.on(args.path, args.callback);\n  }\n};\n\n/**\n * Removes a subscription that was previously made using record.subscribe()\n *\n * Can be called with a path to remove the callback for this specific\n * path or only with a callback which removes it from the generic subscriptions\n *\n * Please Note: unsubscribe is a purely client side operation. If the app is no longer\n * interested in receiving updates for this record from the server it needs to call\n * discard instead\n *\n * @param   {[String|Function]}   pathOrCallback A JSON path\n * @param   {Function}         callback     The callback method. Please note, if a bound\n *                                          method was passed to subscribe, the same method\n *                                          must be passed to unsubscribe as well.\n *\n * @public\n * @returns {void}\n */\n// eslint-disable-next-line\nRecord.prototype.unsubscribe = function (pathOrCallback, callback) {\n  var args = this._normalizeArguments(arguments);\n\n  if (args.path !== undefined && (typeof args.path !== 'string' || args.path.length === 0)) {\n    throw new Error('invalid argument path');\n  }\n  if (args.callback !== undefined && typeof args.callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  if (this._checkDestroyed('unsubscribe')) {\n    return;\n  }\n  this._eventEmitter.off(args.path, args.callback);\n};\n\n/**\n * Removes all change listeners and notifies the server that the client is\n * no longer interested in updates for this record\n *\n * @public\n * @returns {void}\n */\nRecord.prototype.discard = function () {\n  var _this2 = this;\n\n  if (this._checkDestroyed('discard')) {\n    return;\n  }\n  this.whenReady(function () {\n    _this2.usages--;\n    if (_this2.usages <= 0) {\n      _this2.emit('destroyPending');\n      _this2._discardTimeout = _this2._ackTimeoutRegistry.add({\n        topic: C.TOPIC.RECORD,\n        name: _this2.name,\n        action: C.ACTIONS.UNSUBSCRIBE\n      });\n      _this2._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.UNSUBSCRIBE, [_this2.name]);\n    }\n  });\n};\n\n/**\n * Deletes the record on the server.\n *\n * @public\n * @returns {void}\n */\nRecord.prototype.delete = function () {\n  var _this3 = this;\n\n  if (this._checkDestroyed('delete')) {\n    return;\n  }\n  this.whenReady(function () {\n    _this3.emit('destroyPending');\n    _this3._deleteAckTimeout = _this3._ackTimeoutRegistry.add({\n      topic: C.TOPIC.RECORD,\n      name: _this3.name,\n      action: C.ACTIONS.DELETE,\n      event: C.EVENT.DELETE_TIMEOUT,\n      timeout: _this3._options.recordDeleteTimeout\n    });\n    _this3._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.DELETE, [_this3.name]);\n  });\n};\n\n/**\n * Convenience method, similar to promises. Executes callback\n * whenever the record is ready, either immediatly or once the ready\n * event is fired\n *\n * @param   {Function} callback Will be called when the record is ready\n *\n * @returns {void}\n */\nRecord.prototype.whenReady = function (callback) {\n  if (this.isReady === true) {\n    callback(this);\n  } else {\n    this.once('ready', callback.bind(this, this));\n  }\n};\n\n/**\n * Callback for incoming messages from the message handler\n *\n * @param   {Object} message parsed and validated deepstream message\n *\n * @package private\n * @returns {void}\n */\nRecord.prototype._$onMessage = function (message) {\n  if (message.action === C.ACTIONS.READ) {\n    if (this.version === null) {\n      this._ackTimeoutRegistry.clear(message);\n      this._onRead(message);\n    } else {\n      this._applyUpdate(message, this._client);\n    }\n  } else if (message.action === C.ACTIONS.ACK) {\n    this._processAckMessage(message);\n  } else if (message.action === C.ACTIONS.UPDATE || message.action === C.ACTIONS.PATCH) {\n    this._applyUpdate(message, this._client);\n  } else if (message.action === C.ACTIONS.WRITE_ACKNOWLEDGEMENT) {\n    Record._handleWriteAcknowledgements(message, this._writeCallbacks, this._client);\n  } else if (message.data[0] === C.EVENT.VERSION_EXISTS) {\n    // Otherwise it should be an error, and dealt with accordingly\n    this._recoverRecord(message.data[2], JSON.parse(message.data[3]), message);\n  } else if (message.data[0] === C.EVENT.MESSAGE_DENIED) {\n    this._clearTimeouts();\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_HAS_PROVIDER) {\n    var hasProvider = messageParser.convertTyped(message.data[1], this._client);\n    this.hasProvider = hasProvider;\n    this.emit('hasProviderChanged', hasProvider);\n  }\n};\n\nRecord._handleWriteAcknowledgements = function (message, callbacks, client) {\n  var versions = JSON.parse(message.data[1]);\n  for (var i = 0; i < versions.length; i++) {\n    var callback = callbacks[versions[i]];\n    if (callback !== undefined) {\n      callback(messageParser.convertTyped(message.data[2], client));\n      delete callbacks[versions[i]];\n    }\n  }\n};\n\n/**\n * Called when a merge conflict is detected by a VERSION_EXISTS error or if an update recieved\n * is directly after the clients. If no merge strategy is configure it will emit a VERSION_EXISTS\n * error and the record will remain in an inconsistent state.\n *\n * @param   {Number} remoteVersion The remote version number\n * @param   {Object} remoteData The remote object data\n * @param   {Object} message parsed and validated deepstream message\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._recoverRecord = function (remoteVersion, remoteData, message) {\n  message.processedError = true;\n  if (this._mergeStrategy) {\n    this._mergeStrategy(this, remoteData, remoteVersion, this._onRecordRecovered.bind(this, remoteVersion, remoteData, message));\n  } else {\n    this.emit('error', C.EVENT.VERSION_EXISTS, 'received update for ' + remoteVersion + ' but version is ' + this.version);\n  }\n};\n\nRecord.prototype._sendUpdate = function (path, data, config) {\n  this.version++;\n  var msgData = void 0;\n  if (!path) {\n    msgData = config === undefined ? [this.name, this.version, data] : [this.name, this.version, data, config];\n    this._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.UPDATE, msgData);\n  } else {\n    msgData = config === undefined ? [this.name, this.version, path, messageBuilder.typed(data)] : [this.name, this.version, path, messageBuilder.typed(data), config];\n    this._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.PATCH, msgData);\n  }\n};\n\n/**\n * Callback once the record merge has completed. If successful it will set the\n * record state, else emit and error and the record will remain in an\n * inconsistent state until the next update.\n *\n * @param   {Number} remoteVersion The remote version number\n * @param   {Object} remoteData The remote object data\n * @param   {Object} message parsed and validated deepstream message\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._onRecordRecovered = function (remoteVersion, remoteData, message, error, data) {\n  if (!error) {\n    var oldVersion = this.version;\n    this.version = remoteVersion;\n\n    var oldValue = this._$data;\n\n    if (utils.deepEquals(oldValue, remoteData)) {\n      return;\n    }\n\n    var newValue = jsonPath.set(oldValue, undefined, data, false);\n\n    if (utils.deepEquals(data, remoteData)) {\n      this._applyChange(data);\n\n      var callback = this._writeCallbacks[remoteVersion];\n      if (callback !== undefined) {\n        callback(null);\n        delete this._writeCallbacks[remoteVersion];\n      }\n      return;\n    }\n\n    var config = message.data[4];\n    if (config && JSON.parse(config).writeSuccess) {\n      var _callback = this._writeCallbacks[oldVersion];\n      delete this._writeCallbacks[oldVersion];\n      this._setUpCallback(this.version, _callback);\n    }\n    this._sendUpdate(undefined, data, config);\n    this._applyChange(newValue);\n  } else {\n    this.emit('error', C.EVENT.VERSION_EXISTS, 'received update for ' + remoteVersion + ' but version is ' + this.version);\n  }\n};\n\n/**\n * Callback for ack-messages. Acks can be received for\n * subscriptions, discards and deletes\n *\n * @param   {Object} message parsed and validated deepstream message\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._processAckMessage = function (message) {\n  var acknowledgedAction = message.data[0];\n\n  if (acknowledgedAction === C.ACTIONS.SUBSCRIBE) {\n    this._ackTimeoutRegistry.clear(message);\n  } else if (acknowledgedAction === C.ACTIONS.DELETE) {\n    this.emit('delete');\n    this._destroy();\n  } else if (acknowledgedAction === C.ACTIONS.UNSUBSCRIBE) {\n    this.emit('discard');\n    this._destroy();\n  }\n};\n\n/**\n * Applies incoming updates and patches to the record's dataset\n *\n * @param   {Object} message parsed and validated deepstream message\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._applyUpdate = function (message) {\n  var version = parseInt(message.data[1], 10);\n  var data = void 0;\n  if (message.action === C.ACTIONS.PATCH) {\n    data = messageParser.convertTyped(message.data[3], this._client);\n  } else {\n    data = JSON.parse(message.data[2]);\n  }\n\n  if (this.version === null) {\n    this.version = version;\n  } else if (this.version + 1 !== version) {\n    if (message.action === C.ACTIONS.PATCH) {\n      /**\n      * Request a snapshot so that a merge can be done with the read reply which contains\n      * the full state of the record\n      **/\n      this._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.SNAPSHOT, [this.name]);\n    } else {\n      this._recoverRecord(version, data, message);\n    }\n    return;\n  }\n\n  this.version = version;\n  this._applyChange(jsonPath.set(this._$data, message.action === C.ACTIONS.PATCH ? message.data[2] : undefined, data));\n};\n\n/**\n * Callback for incoming read messages\n *\n * @param   {Object} message parsed and validated deepstream message\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._onRead = function (message) {\n  this.version = parseInt(message.data[1], 10);\n  this._applyChange(jsonPath.set(this._$data, undefined, JSON.parse(message.data[2])));\n  this._setReady();\n};\n\n/**\n * Invokes method calls that where queued while the record wasn't ready\n * and emits the ready event\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._setReady = function () {\n  this.isReady = true;\n  for (var i = 0; i < this._queuedMethodCalls.length; i++) {\n    this[this._queuedMethodCalls[i].method].apply(this, this._queuedMethodCalls[i].args);\n  }\n  this._queuedMethodCalls = [];\n  this.emit('ready');\n};\n\nRecord.prototype._setUpCallback = function (currentVersion, callback) {\n  var newVersion = Number(this.version) + 1;\n  this._writeCallbacks[newVersion] = callback;\n};\n\n/**\n * Sends the read message, either initially at record\n * creation or after a lost connection has been re-established\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._sendRead = function () {\n  this._connection.sendMsg(C.TOPIC.RECORD, C.ACTIONS.CREATEORREAD, [this.name]);\n};\n\n/**\n * Compares the new values for every path with the previously stored ones and\n * updates the subscribers if the value has changed\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._applyChange = function (newData) {\n  if (this.isDestroyed) {\n    return;\n  }\n\n  var oldData = this._$data;\n  this._$data = newData;\n\n  var paths = this._eventEmitter.eventNames();\n  for (var i = 0; i < paths.length; i++) {\n    var newValue = jsonPath.get(newData, paths[i], false);\n    var oldValue = jsonPath.get(oldData, paths[i], false);\n\n    if (newValue !== oldValue) {\n      this._eventEmitter.emit(paths[i], this.get(paths[i]));\n    }\n  }\n};\n\n/**\n * Creates a map based on the types of the provided arguments\n *\n * @param {Arguments} args\n *\n * @private\n * @returns {Object} arguments map\n */\nRecord.prototype._normalizeArguments = function (args) {\n  // If arguments is already a map of normalized parameters\n  // (e.g. when called by AnonymousRecord), just return it.\n  if (args.length === 1 && _typeof(args[0]) === 'object') {\n    return args[0];\n  }\n\n  var result = Object.create(null);\n\n  for (var i = 0; i < args.length; i++) {\n    if (typeof args[i] === 'string') {\n      result.path = args[i];\n    } else if (typeof args[i] === 'function') {\n      result.callback = args[i];\n    } else if (typeof args[i] === 'boolean') {\n      result.triggerNow = args[i];\n    }\n  }\n\n  return result;\n};\n\n/**\n * Clears all timeouts that are set when the record is created\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._clearTimeouts = function () {\n  this._ackTimeoutRegistry.remove({ ackId: this._readAckTimeout, silent: true });\n  this._ackTimeoutRegistry.remove({ ackId: this._responseTimeout, silent: true });\n  this._ackTimeoutRegistry.remove({ ackId: this._deleteAckTimeout, silent: true });\n  this._ackTimeoutRegistry.remove({ ackId: this._discardTimeout, silent: true });\n};\n\n/**\n * A quick check that's carried out by most methods that interact with the record\n * to make sure it hasn't been destroyed yet - and to handle it gracefully if it has.\n *\n * @param   {String} methodName The name of the method that invoked this check\n *\n * @private\n * @returns {Boolean} is destroyed\n */\nRecord.prototype._checkDestroyed = function (methodName) {\n  if (this.isDestroyed) {\n    this.emit('error', 'Can\\'t invoke \\'' + methodName + '\\'. Record \\'' + this.name + '\\' is already destroyed');\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Destroys the record and nulls all\n * its dependencies\n *\n * @private\n * @returns {void}\n */\nRecord.prototype._destroy = function () {\n  this._clearTimeouts();\n  this._eventEmitter.off();\n  this._resubscribeNotifier.destroy();\n  this.isDestroyed = true;\n  this.isReady = false;\n  this._client = null;\n  this._eventEmitter = null;\n  this._connection = null;\n};\n\nmodule.exports = Record;\n\n},{\"../constants/constants\":11,\"../message/message-builder\":16,\"../message/message-parser\":17,\"../utils/resubscribe-notifier\":29,\"../utils/utils\":31,\"./json-path\":20,\"component-emitter2\":1}],24:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\nvar ResubscribeNotifier = _dereq_('../utils/resubscribe-notifier');\nvar RpcResponse = _dereq_('./rpc-response');\nvar Rpc = _dereq_('./rpc');\nvar messageParser = _dereq_('../message/message-parser');\nvar messageBuilder = _dereq_('../message/message-builder');\n\n/**\n * The main class for remote procedure calls\n *\n * Provides the rpc interface and handles incoming messages\n * on the rpc topic\n *\n * @param {Object} options deepstream configuration options\n * @param {Connection} connection\n * @param {Client} client\n *\n * @constructor\n * @public\n */\nvar RpcHandler = function RpcHandler(options, connection, client) {\n  this._options = options;\n  this._connection = connection;\n  this._client = client;\n  this._rpcs = {};\n  this._providers = {};\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._resubscribeNotifier = new ResubscribeNotifier(this._client, this._reprovide.bind(this));\n};\n\n/**\n * Registers a callback function as a RPC provider. If another connected client calls\n * client.rpc.make() the request will be routed to this method\n *\n * The callback will be invoked with two arguments:\n *     {Mixed} data The data passed to the client.rpc.make function\n *     {RpcResponse} rpcResponse An object with methods to response,\n *                               acknowledge or reject the request\n *\n * Only one callback can be registered for a RPC at a time\n *\n * Please note: Deepstream tries to deliver data in its original format.\n * Data passed to client.rpc.make as a String will arrive as a String,\n * numbers or implicitly JSON serialized objects will arrive in their\n * respective format as well\n *\n * @public\n * @returns void\n */\nRpcHandler.prototype.provide = function (name, callback) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n  if (this._providers[name]) {\n    throw new Error('RPC ' + name + ' already registered');\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  this._ackTimeoutRegistry.add({\n    topic: C.TOPIC.RPC,\n    name: name,\n    action: C.ACTIONS.SUBSCRIBE\n  });\n  this._providers[name] = callback;\n  this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.SUBSCRIBE, [name]);\n};\n\n/**\n * Unregisters this client as a provider for a remote procedure call\n *\n * @param   {String} name the name of the rpc\n *\n * @public\n * @returns {void}\n */\nRpcHandler.prototype.unprovide = function (name) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n\n  if (this._providers[name]) {\n    delete this._providers[name];\n    this._ackTimeoutRegistry.add({\n      topic: C.TOPIC.RPC,\n      name: name,\n      action: C.ACTIONS.UNSUBSCRIBE\n    });\n    this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.UNSUBSCRIBE, [name]);\n  }\n};\n\n/**\n * Executes the actual remote procedure call\n *\n * @param   {String}   name     The name of the rpc\n * @param   {Mixed}    data     Serializable data that will be passed to the provider\n * @param   {Function} callback Will be invoked with the returned result or if the rpc failed\n *                              receives to arguments: error or null and the result\n *\n * @public\n * @returns {void}\n */\nRpcHandler.prototype.make = function (name, data, callback) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new Error('invalid argument name');\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('invalid argument callback');\n  }\n\n  var uid = this._client.getUid();\n  var typedData = messageBuilder.typed(data);\n\n  this._rpcs[uid] = new Rpc(name, callback, this._options, this._client);\n  this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.REQUEST, [name, uid, typedData]);\n};\n\n/**\n * Retrieves a RPC instance for a correlationId or throws an error\n * if it can't be found (which should never happen)\n *\n * @param {String} correlationId\n * @param {String} rpcName\n *\n * @private\n * @returns {Rpc}\n */\nRpcHandler.prototype._getRpc = function (correlationId, rpcName, rawMessage) {\n  var rpc = this._rpcs[correlationId];\n\n  if (!rpc) {\n    this._client._$onError(C.TOPIC.RPC, C.EVENT.UNSOLICITED_MESSAGE, rawMessage);\n    return null;\n  }\n\n  return rpc;\n};\n\n/**\n * Handles incoming rpc REQUEST messages. Instantiates a new response object\n * and invokes the provider callback or rejects the request if no rpc provider\n * is present (which shouldn't really happen, but might be the result of a race condition\n * if this client sends a unprovide message whilst an incoming request is already in flight)\n *\n * @param   {Object} message The parsed deepstream RPC request message.\n *\n * @private\n * @returns {void}\n */\nRpcHandler.prototype._respondToRpc = function (message) {\n  var name = message.data[0];\n  var correlationId = message.data[1];\n  var data = null;\n  var response = void 0;\n\n  if (message.data[2]) {\n    data = messageParser.convertTyped(message.data[2], this._client);\n  }\n\n  if (this._providers[name]) {\n    response = new RpcResponse(this._connection, name, correlationId);\n    this._providers[name](data, response);\n  } else {\n    this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.REJECTION, [name, correlationId]);\n  }\n};\n\n/**\n * Distributes incoming messages from the server\n * based on their action\n *\n * @param   {Object} message A parsed deepstream message\n *\n * @private\n * @returns {void}\n */\nRpcHandler.prototype._$handle = function (message) {\n  var rpcName = void 0;\n  var correlationId = void 0;\n\n  // RPC Requests\n  if (message.action === C.ACTIONS.REQUEST) {\n    this._respondToRpc(message);\n    return;\n  }\n\n  // RPC subscription Acks\n  if (message.action === C.ACTIONS.ACK && (message.data[0] === C.ACTIONS.SUBSCRIBE || message.data[0] === C.ACTIONS.UNSUBSCRIBE)) {\n    this._ackTimeoutRegistry.clear(message);\n    return;\n  }\n\n  // handle auth/denied subscription errors\n  if (message.action === C.ACTIONS.ERROR) {\n    if (message.data[0] === C.EVENT.MESSAGE_PERMISSION_ERROR) {\n      return;\n    }\n    if (message.data[0] === C.EVENT.MESSAGE_DENIED && message.data[2] === C.ACTIONS.SUBSCRIBE) {\n      this._ackTimeoutRegistry.remove({\n        topic: C.TOPIC.RPC,\n        action: C.ACTIONS.SUBSCRIBE,\n        name: message.data[1]\n      });\n      return;\n    }\n  }\n\n  /*\n   * Error messages always have the error as first parameter. So the\n   * order is different to ack and response messages\n   */\n  if (message.action === C.ACTIONS.ERROR || message.action === C.ACTIONS.ACK) {\n    if (message.data[0] === C.EVENT.MESSAGE_DENIED && message.data[2] === C.ACTIONS.REQUEST) {\n      correlationId = message.data[3];\n    } else {\n      correlationId = message.data[2];\n    }\n    rpcName = message.data[1];\n  } else {\n    rpcName = message.data[0];\n    correlationId = message.data[1];\n  }\n\n  /*\n  * Retrieve the rpc object\n  */\n  var rpc = this._getRpc(correlationId, rpcName, message.raw);\n  if (rpc === null) {\n    return;\n  }\n\n  // RPC Responses\n  if (message.action === C.ACTIONS.ACK) {\n    rpc.ack();\n  } else if (message.action === C.ACTIONS.RESPONSE) {\n    rpc.respond(message.data[2]);\n    delete this._rpcs[correlationId];\n  } else if (message.action === C.ACTIONS.ERROR) {\n    message.processedError = true;\n    rpc.error(message.data[0]);\n    delete this._rpcs[correlationId];\n  }\n};\n\n/**\n * Reregister providers to events when connection is lost\n *\n * @package private\n * @returns {void}\n */\nRpcHandler.prototype._reprovide = function () {\n  for (var rpcName in this._providers) {\n    this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.SUBSCRIBE, [rpcName]);\n  }\n};\n\nmodule.exports = RpcHandler;\n\n},{\"../constants/constants\":11,\"../message/message-builder\":16,\"../message/message-parser\":17,\"../utils/resubscribe-notifier\":29,\"./rpc\":26,\"./rpc-response\":25}],25:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\nvar utils = _dereq_('../utils/utils');\nvar messageBuilder = _dereq_('../message/message-builder');\n\n/**\n * This object provides a number of methods that allow a rpc provider\n * to respond to a request\n *\n * @param {Connection} connection - the clients connection object\n * @param {String} name the name of the rpc\n * @param {String} correlationId the correlationId for the RPC\n */\nvar RpcResponse = function RpcResponse(connection, name, correlationId) {\n  this._connection = connection;\n  this._name = name;\n  this._correlationId = correlationId;\n  this._isAcknowledged = false;\n  this._isComplete = false;\n  this.autoAck = true;\n  utils.nextTick(this._performAutoAck.bind(this));\n};\n\n/**\n * Acknowledges the receipt of the request. This\n * will happen implicitly unless the request callback\n * explicitly sets autoAck to false\n *\n * @public\n * @returns   {void}\n */\nRpcResponse.prototype.ack = function () {\n  if (this._isAcknowledged === false) {\n    this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.ACK, [C.ACTIONS.REQUEST, this._name, this._correlationId]);\n    this._isAcknowledged = true;\n  }\n};\n\n/**\n * Reject the request. This might be necessary if the client\n * is already processing a large number of requests. If deepstream\n * receives a rejection message it will try to route the request to\n * another provider - or return a NO_RPC_PROVIDER error if there are no\n * providers left\n *\n * @public\n * @returns  {void}\n */\nRpcResponse.prototype.reject = function () {\n  this.autoAck = false;\n  this._isComplete = true;\n  this._isAcknowledged = true;\n  this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.REJECTION, [this._name, this._correlationId]);\n};\n\n/**\n * Notifies the server that an error has occured while trying to process the request.\n * This will complete the rpc.\n *\n * @param {String} errorMsg the message used to describe the error that occured\n * @public\n * @returns  {void}\n */\nRpcResponse.prototype.error = function (errorMsg) {\n  this.autoAck = false;\n  this._isComplete = true;\n  this._isAcknowledged = true;\n  this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.ERROR, [errorMsg, this._name, this._correlationId]);\n};\n\n/**\n * Completes the request by sending the response data\n * to the server. If data is an array or object it will\n * automatically be serialised.\n * If autoAck is disabled and the response is sent before\n * the ack message the request will still be completed and the\n * ack message ignored\n *\n * @param {String} data the data send by the provider. Might be JSON serialized\n *\n * @public\n * @returns {void}\n */\nRpcResponse.prototype.send = function (data) {\n  if (this._isComplete === true) {\n    throw new Error('Rpc ' + this._name + ' already completed');\n  }\n  this.ack();\n\n  var typedData = messageBuilder.typed(data);\n  this._connection.sendMsg(C.TOPIC.RPC, C.ACTIONS.RESPONSE, [this._name, this._correlationId, typedData]);\n  this._isComplete = true;\n};\n\n/**\n * Callback for the autoAck timeout. Executes ack\n * if autoAck is not disabled\n *\n * @private\n * @returns {void}\n */\nRpcResponse.prototype._performAutoAck = function () {\n  if (this.autoAck === true) {\n    this.ack();\n  }\n};\n\nmodule.exports = RpcResponse;\n\n},{\"../constants/constants\":11,\"../message/message-builder\":16,\"../utils/utils\":31}],26:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\nvar messageParser = _dereq_('../message/message-parser');\n\n/**\n * This class represents a single remote procedure\n * call made from the client to the server. It's main function\n * is to encapsulate the logic around timeouts and to convert the\n * incoming response data\n *\n * @param {Object}   options           deepstream client config\n * @param {Function} callback          the function that will be called once the request\n *                                     is complete or failed\n * @param {Client} client\n *\n * @constructor\n */\nvar Rpc = function Rpc(name, callback, options, client) {\n  this._options = options;\n  this._callback = callback;\n  this._client = client;\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._ackTimeout = this._ackTimeoutRegistry.add({\n    topic: C.TOPIC.RPC,\n    action: C.ACTIONS.ACK,\n    name: name,\n    timeout: this._options.rpcAckTimeout,\n    callback: this.error.bind(this)\n  });\n  this._responseTimeout = this._ackTimeoutRegistry.add({\n    topic: C.TOPIC.RPC,\n    action: C.ACTIONS.REQUEST,\n    name: name,\n    event: C.EVENT.RESPONSE_TIMEOUT,\n    timeout: this._options.rpcResponseTimeout,\n    callback: this.error.bind(this)\n  });\n};\n\n/**\n * Called once an ack message is received from the server\n *\n * @public\n * @returns {void}\n */\nRpc.prototype.ack = function () {\n  this._ackTimeoutRegistry.remove({\n    ackId: this._ackTimeout\n  });\n};\n\n/**\n * Called once a response message is received from the server.\n * Converts the typed data and completes the request\n *\n * @param   {String} data typed value\n *\n * @public\n * @returns {void}\n */\nRpc.prototype.respond = function (data) {\n  var convertedData = messageParser.convertTyped(data, this._client);\n  this._callback(null, convertedData);\n  this._complete();\n};\n\n/**\n * Callback for error messages received from the server. Once\n * an error is received the request is considered completed. Even\n * if a response arrives later on it will be ignored / cause an\n * UNSOLICITED_MESSAGE error\n *\n * @param   {String} errorMsg @TODO should be CODE and message\n *\n * @public\n * @returns {void}\n */\nRpc.prototype.error = function (timeout) {\n  this._callback(timeout.event || timeout);\n  this._complete();\n};\n\n/**\n * Called after either an error or a response\n * was received\n *\n * @private\n * @returns {void}\n */\nRpc.prototype._complete = function () {\n  this._ackTimeoutRegistry.remove({\n    ackId: this._ackTimeout\n  });\n  this._ackTimeoutRegistry.remove({\n    ackId: this._responseTimeout\n  });\n};\n\nmodule.exports = Rpc;\n\n},{\"../constants/constants\":11,\"../message/message-parser\":17}],27:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\nvar EventEmitter = _dereq_('component-emitter2');\n\n/**\n * Subscriptions to events are in a pending state until deepstream acknowledges\n * them. This is a pattern that's used by numerour classes. This registry aims\n * to centralise the functionality necessary to keep track of subscriptions and\n * their respective timeouts.\n *\n * @param {Client} client          The deepstream client\n * @param {String} topic           Constant. One of C.TOPIC\n * @param {Number} timeoutDuration The duration of the timeout in milliseconds\n *\n * @extends {EventEmitter}\n * @constructor\n */\nvar AckTimeoutRegistry = function AckTimeoutRegistry(client, options) {\n  this._options = options;\n  this._client = client;\n  this._register = {};\n  this._counter = 1;\n  client.on('connectionStateChanged', this._onConnectionStateChanged.bind(this));\n};\n\nEventEmitter(AckTimeoutRegistry.prototype); // eslint-disable-line\n\n/**\n * Add an entry\n *\n * @param {String} name An identifier for the subscription, e.g. a record name or an event name.\n *\n * @public\n * @returns {Number} The timeout identifier\n */\nAckTimeoutRegistry.prototype.add = function (timeout) {\n  var timeoutDuration = timeout.timeout || this._options.subscriptionTimeout;\n\n  if (this._client.getConnectionState() !== C.CONNECTION_STATE.OPEN || timeoutDuration < 1) {\n    return -1;\n  }\n\n  this.remove(timeout);\n  timeout.ackId = this._counter++;\n  timeout.event = timeout.event || C.EVENT.ACK_TIMEOUT;\n  timeout.__timeout = setTimeout(this._onTimeout.bind(this, timeout), timeoutDuration);\n  this._register[this._getUniqueName(timeout)] = timeout;\n  return timeout.ackId;\n};\n\n/**\n * Remove an entry\n *\n * @param {String} name An identifier for the subscription, e.g. a record name or an event name.\n *\n * @public\n * @returns {void}\n */\nAckTimeoutRegistry.prototype.remove = function (timeout) {\n  if (timeout.ackId) {\n    for (var uniqueName in this._register) {\n      if (timeout.ackId === this._register[uniqueName].ackId) {\n        this.clear({\n          topic: this._register[uniqueName].topic,\n          action: this._register[uniqueName].action,\n          data: [this._register[uniqueName].name]\n        });\n      }\n    }\n  }\n\n  if (this._register[this._getUniqueName(timeout)]) {\n    this.clear({\n      topic: timeout.topic,\n      action: timeout.action,\n      data: [timeout.name]\n    });\n  }\n};\n\n/**\n * Processes an incoming ACK-message and removes the corresponding subscription\n *\n * @param   {Object} message A parsed deepstream ACK message\n *\n * @public\n * @returns {void}\n */\nAckTimeoutRegistry.prototype.clear = function (message) {\n  var uniqueName = void 0;\n  if (message.action === C.ACTIONS.ACK && message.data.length > 1) {\n    uniqueName = message.topic + message.data[0] + (message.data[1] ? message.data[1] : '');\n  } else {\n    uniqueName = message.topic + message.action + message.data[0];\n  }\n\n  if (this._register[uniqueName]) {\n    clearTimeout(this._register[uniqueName].__timeout);\n  }\n\n  delete this._register[uniqueName];\n};\n\n/**\n * Will be invoked if the timeout has occured before the ack message was received\n *\n * @param {Object} name The timeout object registered\n *\n * @private\n * @returns {void}\n */\nAckTimeoutRegistry.prototype._onTimeout = function (timeout) {\n  delete this._register[this._getUniqueName(timeout)];\n\n  if (timeout.callback) {\n    delete timeout.__timeout;\n    delete timeout.timeout;\n    timeout.callback(timeout);\n  } else {\n    var msg = 'No ACK message received in time' + (timeout.name ? ' for ' + timeout.name : '');\n    this._client._$onError(timeout.topic, timeout.event, msg);\n  }\n};\n\n/**\n * Returns a unique name from the timeout\n *\n * @private\n * @returns {void}\n */\nAckTimeoutRegistry.prototype._getUniqueName = function (timeout) {\n  return timeout.topic + timeout.action + (timeout.name ? timeout.name : '');\n};\n\n/**\n * Remote all timeouts when connection disconnects\n *\n * @private\n * @returns {void}\n */\nAckTimeoutRegistry.prototype._onConnectionStateChanged = function (connectionState) {\n  if (connectionState !== C.CONNECTION_STATE.OPEN) {\n    for (var uniqueName in this._register) {\n      clearTimeout(this._register[uniqueName].__timeout);\n    }\n  }\n};\n\nmodule.exports = AckTimeoutRegistry;\n\n},{\"../constants/constants\":11,\"component-emitter2\":1}],28:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\nvar ResubscribeNotifier = _dereq_('./resubscribe-notifier');\n\n/*\n * Creates a listener instance which is usedby deepstream Records and Events.\n *\n * @param {String} topic                 One of CONSTANTS.TOPIC\n * @param {String} pattern              A pattern that can be compiled via new RegExp(pattern)\n * @param {Function} callback           The function which is called when pattern was found and\n *                                      removed\n * @param {Connection} Connection       The instance of the server connection\n * @param {Object} options              Deepstream options\n * @param {Client} client               deepstream.io client\n *\n * @constructor\n */\nvar Listener = function Listener(topic, pattern, callback, options, client, connection) {\n  this._topic = topic;\n  this._callback = callback;\n  this._pattern = pattern;\n  this._options = options;\n  this._client = client;\n  this._connection = connection;\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._ackTimeoutRegistry.add({\n    topic: this._topic,\n    name: pattern,\n    action: C.ACTIONS.LISTEN\n  });\n\n  this._resubscribeNotifier = new ResubscribeNotifier(client, this._sendListen.bind(this));\n  this._sendListen();\n  this.destroyPending = false;\n};\n\nListener.prototype.sendDestroy = function () {\n  this.destroyPending = true;\n  this._connection.sendMsg(this._topic, C.ACTIONS.UNLISTEN, [this._pattern]);\n  this._resubscribeNotifier.destroy();\n};\n\n/*\n * Resets internal properties. Is called when provider cals unlisten.\n *\n * @returns {void}\n */\nListener.prototype.destroy = function () {\n  this._callback = null;\n  this._pattern = null;\n  this._client = null;\n  this._connection = null;\n};\n\n/*\n * Accepting a listener request informs deepstream that the current provider is willing to\n * provide the record or event matching the subscriptionName . This will establish the current\n * provider as the only publisher for the actual subscription with the deepstream cluster.\n * Either accept or reject needs to be called by the listener, otherwise it prints out a\n * deprecated warning.\n *\n * @returns {void}\n */\nListener.prototype.accept = function (name) {\n  this._connection.sendMsg(this._topic, C.ACTIONS.LISTEN_ACCEPT, [this._pattern, name]);\n};\n\n/*\n * Rejecting a listener request informs deepstream that the current provider is not willing\n * to provide the record or event matching the subscriptionName . This will result in deepstream\n * requesting another provider to do so instead. If no other provider accepts or exists, the\n * record will remain unprovided.\n * Either accept or reject needs to be called by the listener, otherwise it prints out a\n * deprecated warning.\n *\n * @returns {void}\n */\nListener.prototype.reject = function (name) {\n  this._connection.sendMsg(this._topic, C.ACTIONS.LISTEN_REJECT, [this._pattern, name]);\n};\n\n/*\n * Wraps accept and reject as an argument for the callback function.\n *\n * @private\n * @returns {Object}\n */\nListener.prototype._createCallbackResponse = function (message) {\n  return {\n    accept: this.accept.bind(this, message.data[1]),\n    reject: this.reject.bind(this, message.data[1])\n  };\n};\n\n/*\n * Handles the incomming message.\n *\n * @private\n * @returns {void}\n */\nListener.prototype._$onMessage = function (message) {\n  if (message.action === C.ACTIONS.ACK) {\n    this._ackTimeoutRegistry.clear(message);\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_FOR_PATTERN_FOUND) {\n    this._callback(message.data[1], true, this._createCallbackResponse(message));\n  } else if (message.action === C.ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED) {\n    this._callback(message.data[1], false);\n  } else {\n    this._client._$onError(this._topic, C.EVENT.UNSOLICITED_MESSAGE, message.data[0] + '|' + message.data[1]);\n  }\n};\n\n/*\n * Sends a C.ACTIONS.LISTEN to deepstream.\n *\n * @private\n * @returns {void}\n */\nListener.prototype._sendListen = function () {\n  this._connection.sendMsg(this._topic, C.ACTIONS.LISTEN, [this._pattern]);\n};\n\nmodule.exports = Listener;\n\n},{\"../constants/constants\":11,\"./resubscribe-notifier\":29}],29:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\n\n/**\n * Makes sure that all functionality is resubscribed on reconnect. Subscription is called\n * when the connection drops - which seems counterintuitive, but in fact just means\n * that the re-subscription message will be added to the queue of messages that\n * need re-sending as soon as the connection is re-established.\n *\n * Resubscribe logic should only occur once per connection loss\n *\n * @param {Client} client          The deepstream client\n * @param {Function} reconnect     Function to call to allow resubscribing\n *\n * @constructor\n */\nvar ResubscribeNotifier = function ResubscribeNotifier(client, resubscribe) {\n  this._client = client;\n  this._resubscribe = resubscribe;\n\n  this._isReconnecting = false;\n  this._connectionStateChangeHandler = this._handleConnectionStateChanges.bind(this);\n  this._client.on('connectionStateChanged', this._connectionStateChangeHandler);\n};\n\n/**\n * Call this whenever this functionality is no longer needed to remove links\n *\n * @returns {void}\n */\nResubscribeNotifier.prototype.destroy = function () {\n  this._client.removeListener('connectionStateChanged', this._connectionStateChangeHandler);\n  this._connectionStateChangeHandler = null;\n  this._client = null;\n};\n\n/**\n* Check whenever the connection state changes if it is in reconnecting to resubscribe\n* @private\n* @returns {void}\n*/\nResubscribeNotifier.prototype._handleConnectionStateChanges = function () {\n  var state = this._client.getConnectionState();\n\n  if (state === C.CONNECTION_STATE.RECONNECTING && this._isReconnecting === false) {\n    this._isReconnecting = true;\n  }\n  if (state === C.CONNECTION_STATE.OPEN && this._isReconnecting === true) {\n    this._isReconnecting = false;\n    this._resubscribe();\n  }\n};\n\nmodule.exports = ResubscribeNotifier;\n\n},{\"../constants/constants\":11}],30:[function(_dereq_,module,exports){\n'use strict';\n\nvar C = _dereq_('../constants/constants');\nvar ResubscribeNotifier = _dereq_('./resubscribe-notifier');\n\n/**\n * Provides a scaffold for subscriptionless requests to deepstream, such as the SNAPSHOT\n * and HAS functionality. The SingleNotifier multiplexes all the client requests so\n * that they can can be notified at once, and also includes reconnection funcionality\n * incase the connection drops.\n *\n * @param {Client} client          The deepstream client\n * @param {Connection} connection  The deepstream connection\n * @param {String} topic           Constant. One of C.TOPIC\n * @param {String} action          Constant. One of C.ACTIONS\n * @param {Number} timeoutDuration The duration of the timeout in milliseconds\n *\n * @constructor\n */\nvar SingleNotifier = function SingleNotifier(client, connection, topic, action, timeoutDuration) {\n  this._client = client;\n  this._connection = connection;\n  this._topic = topic;\n  this._action = action;\n  this._timeoutDuration = timeoutDuration;\n  this._requests = {};\n  this._ackTimeoutRegistry = client._$getAckTimeoutRegistry();\n  this._resubscribeNotifier = new ResubscribeNotifier(this._client, this._resendRequests.bind(this));\n  this._onResponseTimeout = this._onResponseTimeout.bind(this);\n};\n\n/**\n * Check if there is a request pending with a specified name\n *\n * @param {String} name An identifier for the request, e.g. a record name\n *\n * @public\n * @returns {void}\n */\nSingleNotifier.prototype.hasRequest = function (name) {\n  return !!this._requests[name];\n};\n\n/**\n * Add a request. If one has already been made it will skip the server request\n * and multiplex the response\n *\n * @param {String} name An identifier for the request, e.g. a record name\n\n *\n * @public\n * @returns {void}\n */\nSingleNotifier.prototype.request = function (name, callback) {\n  if (!this._requests[name]) {\n    this._requests[name] = [];\n    this._connection.sendMsg(this._topic, this._action, [name]);\n  }\n\n  var ackId = this._ackTimeoutRegistry.add({\n    topic: this._topic,\n    event: C.EVENT.RESPONSE_TIMEOUT,\n    name: name,\n    action: this._action,\n    timeout: this._timeoutDuration,\n    callback: this._onResponseTimeout\n  });\n  this._requests[name].push({ callback: callback, ackId: ackId });\n};\n\n/**\n * Process a response for a request. This has quite a flexible API since callback functions\n * differ greatly and helps maximise reuse.\n *\n * @param {String} name An identifier for the request, e.g. a record name\n * @param {String} error Error message\n * @param {Object} data If successful, the response data\n *\n * @public\n * @returns {void}\n */\nSingleNotifier.prototype.recieve = function (name, error, data) {\n  var entries = this._requests[name];\n\n  if (!entries) {\n    this._client._$onError(this._topic, C.EVENT.UNSOLICITED_MESSAGE, 'no entry for ' + name);\n    return;\n  }\n\n  for (var i = 0; i < entries.length; i++) {\n    var entry = entries[i];\n    this._ackTimeoutRegistry.remove({\n      ackId: entry.ackId\n    });\n    entry.callback(error, data);\n  }\n  delete this._requests[name];\n};\n\n/**\n * Will be invoked if a timeout occurs before a response arrives from the server\n *\n * @param {String} name An identifier for the request, e.g. a record name\n *\n * @private\n * @returns {void}\n */\nSingleNotifier.prototype._onResponseTimeout = function (timeout) {\n  var msg = 'No response received in time for ' + this._topic + '|' + this._action + '|' + timeout.name;\n  this._client._$onError(this._topic, C.EVENT.RESPONSE_TIMEOUT, msg);\n};\n\n/**\n * Resends all the requests once the connection is back up\n *\n * @private\n * @returns {void}\n */\nSingleNotifier.prototype._resendRequests = function () {\n  for (var request in this._requests) {\n    this._connection.sendMsg(this._topic, this._action, [request]);\n  }\n};\n\nmodule.exports = SingleNotifier;\n\n},{\"../constants/constants\":11,\"./resubscribe-notifier\":29}],31:[function(_dereq_,module,exports){\n(function (process){\n'use strict';\n/* eslint-disable valid-typeof */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar C = _dereq_('../constants/constants');\n\n/**\n * A regular expression that matches whitespace on either side, but\n * not in the center of a string\n *\n * @type {RegExp}\n */\nvar TRIM_REGULAR_EXPRESSION = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n/**\n * Used in typeof comparisons\n *\n * @type {String}\n */\nvar OBJECT = 'object';\n\n/**\n * True if environment is node, false if it's a browser\n * This seems somewhat inelegant, if anyone knows a better solution,\n * let's change this (must identify browserify's pseudo node implementation though)\n *\n * @public\n * @type {Boolean}\n */\nexports.isNode = typeof process !== 'undefined' && process.toString() === '[object process]';\n\n/**\n * Provides as soon as possible async execution in a cross\n * platform way\n *\n * @param   {Function} fn the function to be executed in an asynchronous fashion\n *\n * @public\n * @returns {void}\n */\nexports.nextTick = function (fn) {\n  if (exports.isNode) {\n    process.nextTick(fn);\n  } else {\n    setTimeout(fn, 0);\n  }\n};\n\n/**\n * Removes whitespace from the beginning and end of a string\n *\n * @param   {String} inputString\n *\n * @public\n * @returns {String} trimmedString\n */\nexports.trim = function (inputString) {\n  if (inputString.trim) {\n    return inputString.trim();\n  }\n  return inputString.replace(TRIM_REGULAR_EXPRESSION, '');\n};\n\n/**\n * Compares two objects for deep (recoursive) equality\n *\n * This used to be a significantly more complex custom implementation,\n * but JSON.stringify has gotten so fast that it now outperforms the custom\n * way by a factor of 1.5 to 3.\n *\n * In IE11 / Edge the custom implementation is still slightly faster, but for\n * consistencies sake and the upsides of leaving edge-case handling to the native\n * browser / node implementation we'll go for JSON.stringify from here on.\n *\n * Please find performance test results here\n *\n * http://jsperf.com/deep-equals-code-vs-json\n *\n * @param   {Mixed} objA\n * @param   {Mixed} objB\n *\n * @public\n * @returns {Boolean} isEqual\n */\nexports.deepEquals = function (objA, objB) {\n  if (objA === objB) {\n    return true;\n  } else if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== OBJECT || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== OBJECT) {\n    return false;\n  }\n\n  return JSON.stringify(objA) === JSON.stringify(objB);\n};\n\n/**\n * Similar to deepEquals above, tests have shown that JSON stringify outperforms any attempt of\n * a code based implementation by 50% - 100% whilst also handling edge-cases and keeping\n * implementation complexity low.\n *\n * If ES6/7 ever decides to implement deep copying natively (what happened to Object.clone?\n * that was briefly a thing...), let's switch it for the native implementation. For now though,\n * even Object.assign({}, obj) only provides a shallow copy.\n *\n * Please find performance test results backing these statements here:\n *\n * http://jsperf.com/object-deep-copy-assign\n *\n * @param   {Mixed} obj the object that should be cloned\n *\n * @public\n * @returns {Mixed} clone\n */\nexports.deepCopy = function (obj) {\n  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === OBJECT) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  return obj;\n};\n\n/**\n * Copy the top level of items, but do not copy its items recourisvely. This\n * is much quicker than deepCopy does not guarantee the object items are new/unique.\n * Mainly used to change the reference to the actual object itself, but not its children.\n *\n * @param   {Mixed} obj the object that should cloned\n *\n * @public\n * @returns {Mixed} clone\n */\nexports.shallowCopy = function (obj) {\n  if (Array.isArray(obj)) {\n    return obj.slice(0);\n  } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === OBJECT) {\n    var copy = Object.create(null);\n    var props = Object.keys(obj);\n    for (var i = 0; i < props.length; i++) {\n      copy[props[i]] = obj[props[i]];\n    }\n    return copy;\n  }\n  return obj;\n};\n\n/**\n * Set timeout utility that adds support for disabling a timeout\n * by passing null\n *\n * @param {Function} callback        the function that will be called after the given time\n * @param {Number}   timeoutDuration the duration of the timeout in milliseconds\n *\n * @public\n * @returns {Number} timeoutId\n */\nexports.setTimeout = function (callback, timeoutDuration) {\n  if (timeoutDuration !== null) {\n    return setTimeout(callback, timeoutDuration);\n  }\n  return -1;\n};\n\n/**\n * Set Interval utility that adds support for disabling an interval\n * by passing null\n *\n * @param {Function} callback        the function that will be called after the given time\n * @param {Number}   intervalDuration the duration of the interval in milliseconds\n *\n * @public\n * @returns {Number} intervalId\n */\nexports.setInterval = function (callback, intervalDuration) {\n  if (intervalDuration !== null) {\n    return setInterval(callback, intervalDuration);\n  }\n  return -1;\n};\n\n/**\n * This method is used to break up long running operations and run a callback function immediately\n * after the browser has completed other operations such as events and display updates.\n *\n * @param {Function} callback        the function that will be called after the given time\n * @param {...*}     param1, ..., paramN additional parameters which are passed through to the\n *                                     callback\n *\n * @public\n */\nexports.requestIdleCallback = !exports.isNode && window.requestIdleCallback && window.requestIdleCallback.bind(window) || function (cb) {\n  var start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function timeRemaining() {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.cancelIdleCallback = !exports.isNode && window.cancelIdleCallback && window.cancelIdleCallback.bind(window) || function (id) {\n  clearTimeout(id);\n};\n\n/**\n * Used to see if a protocol is specified within the url\n * @type {RegExp}\n */\nvar hasUrlProtocol = /^wss:|^ws:|^\\/\\//;\n\n/**\n * Used to see if the protocol contains any unsupported protocols\n * @type {RegExp}\n */\nvar unsupportedProtocol = /^http:|^https:/;\n\nvar URL = _dereq_('url');\n\n/**\n * Take the url passed when creating the client and ensure the correct\n * protocol is provided\n * @param  {String} url Url passed in by client\n * @return {String} Url with supported protocol\n */\nexports.parseUrl = function (initialURl, defaultPath) {\n  var url = initialURl;\n  if (unsupportedProtocol.test(url)) {\n    throw new Error('Only ws and wss are supported');\n  }\n  if (!hasUrlProtocol.test(url)) {\n    url = 'ws://' + url;\n  } else if (url.indexOf('//') === 0) {\n    url = 'ws:' + url;\n  }\n  var serverUrl = URL.parse(url);\n  if (!serverUrl.host) {\n    throw new Error('invalid url, missing host');\n  }\n  serverUrl.protocol = serverUrl.protocol ? serverUrl.protocol : 'ws:';\n  serverUrl.pathname = serverUrl.pathname ? serverUrl.pathname : defaultPath;\n  return URL.format(serverUrl);\n};\n\n/**\n * Returns true is the connection state is OPEN\n * @return {Boolean}\n */\nexports.isConnected = function (client) {\n  var connectionState = client.getConnectionState();\n  return connectionState === C.CONNECTION_STATE.OPEN;\n};\n\n}).call(this,_dereq_('_process'))\n},{\"../constants/constants\":11,\"_process\":3,\"url\":8}]},{},[10])(10)\n});"}},[2]);